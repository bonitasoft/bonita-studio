grammar org.bonitasoft.studio.condition.ConditionModel with org.eclipse.xtext.common.Terminals hidden(WS)

import "http://www.eclipse.org/emf/2002/Ecore" as ecore

generate conditionModel "http://www.bonitasoft.org/studio/condition/ConditionModel"


Operation_Compare :
	{Operation_Compare}
	op=(Operation | Unary_Operation)
;

Unary_Operation :
	Operation_Unary | Operation_NotUnary
;

Operation:
	Operation_Less_Equals | Operation_Less | Operation_Greater_Equals | Operation_Greater | Operation_Not_Equals | Operation_Equals
;

Operation_Less_Equals returns Operation :
	{Operation_Less_Equals}
	left=(Expression_Terminal) '<=' right=(Expression_Terminal)
;

Operation_Less returns Operation :
	{Operation_Less}
	left=(Expression_Terminal) '<' right=(Expression_Terminal)
;

Operation_Greater_Equals returns Operation :
	{Operation_Greater_Equals}
	left=(Expression_Terminal) '>=' right=(Expression_Terminal)
;

Operation_Greater returns Operation :
	{Operation_Greater}
	left=(Expression_Terminal) '>' right=(Expression_Terminal)
;

Operation_Not_Equals returns Operation :
	{Operation_Not_Equals}
	left=(Expression_Terminal) '!=' right=(Expression_Terminal)
;

Operation_Equals returns Operation :
	{Operation_Equals}
	left=(Expression_Terminal) '==' right=(Expression_Terminal)
;

Operation_Unary returns Unary_Operation :
	{Operation_Unary}
	value=(Expression_Terminal)
;

Operation_NotUnary returns Unary_Operation :
	{Operation_NotUnary}
	'!' value=(Expression_Terminal)
;

Expression_Terminal  returns Expression:
	Expression_Double | Expression_Integer | Expression_Boolean  | Expression_String |  Expression_ProcessRef
;

Expression_Double :
	{Expression_Double}
	value = DOUBLE
;

Expression_Integer :
	{Expression_Integer}
	value = LONG
;

Expression_String :
	{Expression_String}
	value = STRING
;


Expression_ProcessRef hidden(WS):
	{Expression_ProcessRef}
	value = [ecore::EObject]
;


Expression_Boolean:
	{Expression_Boolean}
	value = BOOLEAN
;
terminal UTF8_CHARACTERS : ('\u00C0'..'\uFEFF');

terminal WS:
	 (' '|'\t'|'\r'|'\n')+
;

terminal BOOLEAN returns ecore::EBoolean: 'true' | 'false';
terminal DATE returns ecore::EDate: "'" (!"'")* "'";
terminal LONG returns ecore::ELong : ('-')?('0'..'9')+;
terminal DOUBLE returns ecore::EDouble: ('-')?INT'.'INT;
terminal ID: ('a'..'z'|'A'..'Z'|'_'|UTF8_CHARACTERS) ('a'..'z'|'A'..'Z'|'_'|'0'..'9'|UTF8_CHARACTERS)*;


