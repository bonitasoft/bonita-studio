/*
 * Copyright (C) 2010 BonitaSoft S.A.
 * BonitaSoft, 31 rue Gustave Eiffel - 38000 Grenoble
 * 
 * This program is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 2.0 of the License, or
 * (at your option) any later version.
 * 
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 * 
 * You should have received a copy of the GNU General Public License
 * along with this program.  If not, see <http://www.gnu.org/licenses/>.
 */

«IMPORT 'http://www.eclipse.org/gmf/2009/GenModel'»
«EXTENSION xpt::diagram::ViewmapAttributesUtils»
«EXTENSION xpt::diagram::editparts::Utils»
«EXTENSION xpt::diagram::Utils»

«AROUND addFixedChild FOR gmfgen::GenNode-»
	/*
	* @generated by BonitaSoft
	*/
	protected boolean addFixedChild(org.eclipse.gef.EditPart childEditPart) {
«FOREACH getInnerFixedLabels(self) AS label»«LET label.viewmap.oclAsType(gmfgen::ParentAssignedViewmap) AS childViewmap-»
		if (childEditPart instanceof «label.getEditPartQualifiedClassName()») {
			((«label.getEditPartQualifiedClassName()») childEditPart).«EXPAND impl::diagram::editparts::TextAware::labelSetterName FOR childViewmap»(getPrimaryShape().«childViewmap.getterName»());
   			if (VISUAL_ID != 3007 && VISUAL_ID != 2007 && VISUAL_ID != 3015 && VISUAL_ID != 3058) {
					getPrimaryShape().«childViewmap.getterName»().addMouseMotionListener(new org.bonitasoft.studio.common.diagram.ActivityNameCursorMouseMotionListener(this));
			}
			return true;
		}
«ENDLET»«ENDFOREACH-»
«FOREACH getPinnedCompartments(self) AS compartment»«LET compartment.viewmap.oclAsType(gmfgen::ParentAssignedViewmap) AS childViewmap-»
		if (childEditPart instanceof «compartment.getEditPartQualifiedClassName()») {
			org.eclipse.draw2d.IFigure pane = getPrimaryShape().«childViewmap.getterName»();
			setupContentPane(pane); // FIXME each comparment should handle his content pane in his own way 
			pane.add(((«compartment.getEditPartQualifiedClassName()») childEditPart).getFigure());
			return true;
		}	
«ENDLET»«ENDFOREACH-»
«REM»For affixed children use a custom borderItemLocator«ENDREM»
«FOREACH getSideAffixedChildren(self) AS child-»
		if (childEditPart instanceof «child.getEditPartQualifiedClassName()») {
			org.eclipse.gmf.runtime.diagram.ui.figures.BorderItemLocator locator = new org.bonitasoft.studio.common.gmf.ActivityBorderItemLocator(getMainFigure(), org.eclipse.draw2d.PositionConstants.«child.preferredSideName»);
			getBorderedFigure().getBorderItemContainer().add(((«child.getEditPartQualifiedClassName()») childEditPart).getFigure(), locator);
			return true;
		}
«ENDFOREACH-»
		return false;
	}
«ENDAROUND»

«DEFINE getPrimaryDragEditPolicy FOR gmfgen::GenChildSideAffixedNode-»
	public org.eclipse.gef.EditPolicy getPrimaryDragEditPolicy() {
		return new org.eclipse.gmf.runtime.diagram.ui.editpolicies.BorderItemSelectionEditPolicy(){
			@Override
			protected void showPrimarySelection() {
				super.showPrimarySelection();
				hideSelection() ;
				org.eclipse.draw2d.IFigure layer = getLayer(org.eclipse.gef.LayerConstants.HANDLE_LAYER) ;
				layer.setBackgroundColor(org.eclipse.draw2d.ColorConstants.black) ;
				layer.setVisible(true) ;
				for(Object f : layer.getChildren()){
					((org.eclipse.draw2d.IFigure)f).setBackgroundColor(org.eclipse.draw2d.ColorConstants.black) ;
					((org.eclipse.draw2d.IFigure)f).setVisible(true) ;
				}
			}
			
			@Override
			protected org.eclipse.draw2d.IFigure createDragSourceFeedbackFigure() {
				org.eclipse.draw2d.IFigure r = org.bonitasoft.studio.common.diagram.tools.FiguresHelper.getSelectedFigure(resolveSemanticElement().eClass(), -1,-1, null, null) ;
				addFeedback(r);
				return r;
			}
		};
	}
«ENDDEFINE»

«DEFINE setupContentPane FOR gmfgen::GenNode-»
	«EXPAND xpt::Common::generatedMemberComment(
		'Default implementation treats passed figure as content pane.\n' + 
		'Respects layout one may have set for generated figure.\n' + 
		'@param nodeShape instance of generated figure class'
	)»
	protected org.eclipse.draw2d.IFigure setupContentPane(org.eclipse.draw2d.IFigure nodeShape) {
		«IF not childNodes->isEmpty() or (not compartments->isEmpty() or labels[not oclIsKindOf(gmfgen::GenExternalNodeLabel)]->notEmpty())-»
			if (nodeShape.getLayoutManager() == null) {
				«IF getLayoutType() = gmfgen::ViewmapLayoutType::XY_LAYOUT-»
					nodeShape.setLayoutManager(new org.eclipse.draw2d.FreeformLayout() {

						public Object getConstraint(org.eclipse.draw2d.IFigure figure) {
							Object result = constraints.get(figure);
							if (result == null) {
								result = new org.eclipse.draw2d.geometry.Rectangle(0, 0, -1, -1);
							}
							return result;
						}
					});
				«ELSE-»
					org.eclipse.gmf.runtime.draw2d.ui.figures.ConstrainedToolbarLayout layout =new org.eclipse.gmf.runtime.draw2d.ui.figures.ConstrainedToolbarLayout();
					layout.setSpacing(«IF getDiagram().isPixelMapMode()»5«ELSE»getMapMode().DPtoLP(5)«ENDIF»);
					nodeShape.setLayoutManager(layout);
				«ENDIF-»
			}
		«ENDIF-»
		 if (VISUAL_ID != 3007 && VISUAL_ID != 2007) {
			getPrimaryShape().addMouseMotionListener(new org.bonitasoft.studio.common.diagram.ActivityCursorMouseMotionListener());
		 }
		return nodeShape; // use nodeShape itself as contentPane
	}
«ENDDEFINE»


«DEFINE borderItemSelectionEditPolicy FOR gmfgen::GenNode-»
«REM»do not reset selection edit policy on child«ENDREM»
«ENDDEFINE»