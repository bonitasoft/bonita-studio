/**
 * Copyright (C) 2015 Bonitasoft S.A.
 * Bonitasoft, 32 rue Gustave Eiffel - 38000 Grenoble
 * This program is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 2.0 of the License, or
 * (at your option) any later version.
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
 * GNU General Public License for more details.
 * You should have received a copy of the GNU General Public License
 * along with this program. If not, see <http://www.gnu.org/licenses/>.
 */
package org.bonitasoft.studio.model.process.assertions;

import static java.lang.String.format;

import org.assertj.core.api.AbstractAssert;
import org.assertj.core.api.Assertions;
import org.bonitasoft.studio.model.process.ContractConstraint;

/**
 * {@link ContractConstraint} specific assertions - Generated by CustomAssertionGenerator.
 */
public class ContractConstraintAssert extends AbstractAssert<ContractConstraintAssert, ContractConstraint> {

    /**
     * Creates a new </code>{@link ContractConstraintAssert}</code> to make assertions on actual ContractConstraint.
     * 
     * @param actual the ContractConstraint we want to make assertions on.
     */
    public ContractConstraintAssert(final ContractConstraint actual) {
        super(actual, ContractConstraintAssert.class);
    }

    /**
     * An entry point for ContractConstraintAssert to follow AssertJ standard <code>assertThat()</code> statements.<br>
     * With a static import, one's can write directly : <code>assertThat(myContractConstraint)</code> and get specific assertion with code completion.
     * 
     * @param actual the ContractConstraint we want to make assertions on.
     * @return a new </code>{@link ContractConstraintAssert}</code>
     */
    public static ContractConstraintAssert assertThat(final ContractConstraint actual) {
        return new ContractConstraintAssert(actual);
    }

    /**
     * Verifies that the actual ContractConstraint's errorMessage is equal to the given one.
     * 
     * @param errorMessage the given errorMessage to compare the actual ContractConstraint's errorMessage to.
     * @return this assertion object.
     * @throws AssertionError - if the actual ContractConstraint's errorMessage is not equal to the given one.
     */
    public ContractConstraintAssert hasErrorMessage(final String errorMessage) {
        // check that actual ContractConstraint we want to make assertions on is not null.
        isNotNull();

        // we overrides the default error message with a more explicit one
        final String errorMsg = format("\nExpected <%s> errorMessage to be:\n  <%s>\n but was:\n  <%s>", actual, errorMessage, actual.getErrorMessage());

        // check
        if (!actual.getErrorMessage().equals(errorMessage)) {
            throw new AssertionError(errorMsg);
        }

        // return the current assertion for method chaining
        return this;
    }

    /**
     * Verifies that the actual ContractConstraint's expression is equal to the given one.
     * 
     * @param expression the given expression to compare the actual ContractConstraint's expression to.
     * @return this assertion object.
     * @throws AssertionError - if the actual ContractConstraint's expression is not equal to the given one.
     */
    public ContractConstraintAssert hasExpression(final String expression) {
        // check that actual ContractConstraint we want to make assertions on is not null.
        isNotNull();

        // we overrides the default error message with a more explicit one
        final String errorMessage = format("\nExpected <%s> expression to be:\n  <%s>\n but was:\n  <%s>", actual, expression, actual.getExpression());

        // check
        if (!actual.getExpression().equals(expression)) {
            throw new AssertionError(errorMessage);
        }

        // return the current assertion for method chaining
        return this;
    }

    /**
     * Verifies that the actual ContractConstraint's inputNames contains the given String elements.
     * 
     * @param inputNames the given elements that should be contained in actual ContractConstraint's inputNames.
     * @return this assertion object.
     * @throws AssertionError if the actual ContractConstraint's inputNames does not contain all given String elements.
     */
    public ContractConstraintAssert hasInputNames(final String... inputNames) {
        // check that actual ContractConstraint we want to make assertions on is not null.
        isNotNull();

        // check that given String varargs is not null.
        if (inputNames == null) {
            throw new AssertionError("Expecting inputNames parameter not to be null.");
        }

        // check with standard error message (see commented below to set your own message).
        Assertions.assertThat(actual.getInputNames()).contains(inputNames);

        // uncomment the 4 lines below if you want to build your own error message :
        // WritableAssertionInfo assertionInfo = new WritableAssertionInfo();
        // String errorMessage = "my error message";
        // assertionInfo.overridingErrorMessage(errorMessage);
        // Iterables.instance().assertContains(assertionInfo, actual.getTeamMates(), teamMates);

        // return the current assertion for method chaining
        return this;
    }

    /**
     * Verifies that the actual ContractConstraint has no inputNames.
     * 
     * @return this assertion object.
     * @throws AssertionError if the actual ContractConstraint's inputNames is not empty.
     */
    public ContractConstraintAssert hasNoInputNames() {
        // check that actual ContractConstraint we want to make assertions on is not null.
        isNotNull();

        // we overrides the default error message with a more explicit one
        final String errorMessage = format("\nExpected :\n  <%s>\nnot to have inputNames but had :\n  <%s>", actual, actual.getInputNames());

        // check
        if (!actual.getInputNames().isEmpty()) {
            throw new AssertionError(errorMessage);
        }

        // return the current assertion for method chaining
        return this;
    }

    /**
     * Verifies that the actual ContractConstraint's name is equal to the given one.
     * 
     * @param name the given name to compare the actual ContractConstraint's name to.
     * @return this assertion object.
     * @throws AssertionError - if the actual ContractConstraint's name is not equal to the given one.
     */
    public ContractConstraintAssert hasName(final String name) {
        // check that actual ContractConstraint we want to make assertions on is not null.
        isNotNull();

        // we overrides the default error message with a more explicit one
        final String errorMessage = format("\nExpected <%s> name to be:\n  <%s>\n but was:\n  <%s>", actual, name, actual.getName());

        // check
        if (!actual.getName().equals(name)) {
            throw new AssertionError(errorMessage);
        }

        // return the current assertion for method chaining
        return this;
    }

}
