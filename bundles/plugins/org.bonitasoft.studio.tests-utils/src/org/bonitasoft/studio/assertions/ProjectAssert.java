/**
 * Copyright (C) 2015 Bonitasoft S.A.
 * Bonitasoft, 32 rue Gustave Eiffel - 38000 Grenoble
 * This program is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 2.0 of the License, or
 * (at your option) any later version.
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
 * GNU General Public License for more details.
 * You should have received a copy of the GNU General Public License
 * along with this program. If not, see <http://www.gnu.org/licenses/>.
 */
package org.bonitasoft.studio.assertions;

import static java.lang.String.format;

import org.assertj.core.api.AbstractAssert;
import org.assertj.core.api.Assertions;
import org.eclipse.core.resources.IBuildConfiguration;
import org.eclipse.core.resources.IProject;
import org.eclipse.core.resources.IProjectDescription;
import org.eclipse.core.runtime.CoreException;
import org.eclipse.core.runtime.content.IContentTypeMatcher;

/**
 * {@link IProject} specific assertions - Generated by CustomAssertionGenerator.
 */
public class ProjectAssert extends AbstractAssert<ProjectAssert, IProject> {

    /**
     * Creates a new </code>{@link ProjectAssert}</code> to make assertions on actual IProject.
     *
     * @param actual the IProject we want to make assertions on.
     */
    public ProjectAssert(final IProject actual) {
        super(actual, ProjectAssert.class);
    }

    /**
     * An entry point for IProjectAssert to follow AssertJ standard <code>assertThat()</code> statements.<br>
     * With a static import, one's can write directly : <code>assertThat(myIProject)</code> and get specific assertion with code completion.
     *
     * @param actual the IProject we want to make assertions on.
     * @return a new </code>{@link ProjectAssert}</code>
     */
    public static ProjectAssert assertThat(final IProject actual) {
        return new ProjectAssert(actual);
    }

    /**
     * Verifies that the actual IProject's activeBuildConfig is equal to the given one.
     *
     * @param activeBuildConfig the given activeBuildConfig to compare the actual IProject's activeBuildConfig to.
     * @return this assertion object.
     * @throws CoreException
     * @throws AssertionError - if the actual IProject's activeBuildConfig is not equal to the given one.
     */
    public ProjectAssert hasActiveBuildConfig(final IBuildConfiguration activeBuildConfig) throws CoreException, AssertionError {
        // check that actual IProject we want to make assertions on is not null.
        isNotNull();

        // we overrides the default error message with a more explicit one
        final String errorMessage = format("\nExpected <%s> activeBuildConfig to be:\n  <%s>\n but was:\n  <%s>", actual, activeBuildConfig,
                actual.getActiveBuildConfig());

        // check
        if (!actual.getActiveBuildConfig().equals(activeBuildConfig)) {
            throw new AssertionError(errorMessage);
        }

        // return the current assertion for method chaining
        return this;
    }

    /**
     * Verifies that the actual IProject's buildConfigs contains the given IBuildConfiguration elements.
     *
     * @param buildConfigs the given elements that should be contained in actual IProject's buildConfigs.
     * @return this assertion object.
     * @throws CoreException
     * @throws AssertionError if the actual IProject's buildConfigs does not contain all given IBuildConfiguration elements.
     */
    public ProjectAssert hasBuildConfigs(final IBuildConfiguration... buildConfigs) throws CoreException {
        // check that actual IProject we want to make assertions on is not null.
        isNotNull();

        // check that given IBuildConfiguration varargs is not null.
        if (buildConfigs == null) {
            throw new AssertionError("Expecting buildConfigs parameter not to be null.");
        }

        // check with standard error message (see commented below to set your own message).
        Assertions.assertThat(actual.getBuildConfigs()).contains(buildConfigs);

        // uncomment the 4 lines below if you want to build your own error message :
        // WritableAssertionInfo assertionInfo = new WritableAssertionInfo();
        // String errorMessage = "my error message";
        // assertionInfo.overridingErrorMessage(errorMessage);
        // Iterables.instance().assertContains(assertionInfo, actual.getTeamMates(), teamMates);

        // return the current assertion for method chaining
        return this;
    }

    /**
     * Verifies that the actual IProject has no buildConfigs.
     *
     * @return this assertion object.
     * @throws CoreException
     * @throws AssertionError if the actual IProject's buildConfigs is not empty.
     */
    public ProjectAssert hasNoBuildConfigs() throws CoreException {
        // check that actual IProject we want to make assertions on is not null.
        isNotNull();

        // we overrides the default error message with a more explicit one
        final String errorMessage = format("\nExpected :\n  <%s>\nnot to have buildConfigs but had :\n  <%s>", actual,
                java.util.Arrays.toString(actual.getBuildConfigs()));

        // check
        if (actual.getBuildConfigs().length > 0) {
            throw new AssertionError(errorMessage);
        }

        // return the current assertion for method chaining
        return this;
    }

    /**
     * Verifies that the actual IProject's contentTypeMatcher is equal to the given one.
     *
     * @param contentTypeMatcher the given contentTypeMatcher to compare the actual IProject's contentTypeMatcher to.
     * @return this assertion object.
     * @throws CoreException
     * @throws AssertionError - if the actual IProject's contentTypeMatcher is not equal to the given one.
     */
    public ProjectAssert hasContentTypeMatcher(final IContentTypeMatcher contentTypeMatcher) throws CoreException {
        // check that actual IProject we want to make assertions on is not null.
        isNotNull();

        // we overrides the default error message with a more explicit one
        final String errorMessage = format("\nExpected <%s> contentTypeMatcher to be:\n  <%s>\n but was:\n  <%s>", actual, contentTypeMatcher,
                actual.getContentTypeMatcher());

        // check
        if (!actual.getContentTypeMatcher().equals(contentTypeMatcher)) {
            throw new AssertionError(errorMessage);
        }

        // return the current assertion for method chaining
        return this;
    }

    /**
     * Verifies that the actual IProject's description is equal to the given one.
     *
     * @param description the given description to compare the actual IProject's description to.
     * @return this assertion object.
     * @throws CoreException
     * @throws AssertionError - if the actual IProject's description is not equal to the given one.
     */
    public ProjectAssert hasDescription(final IProjectDescription description) throws CoreException, AssertionError {
        // check that actual IProject we want to make assertions on is not null.
        isNotNull();

        // we overrides the default error message with a more explicit one
        final String errorMessage = format("\nExpected <%s> description to be:\n  <%s>\n but was:\n  <%s>", actual, description, actual.getDescription());

        // check
        if (!actual.getDescription().equals(description)) {
            throw new AssertionError(errorMessage);
        }

        // return the current assertion for method chaining
        return this;
    }

    /**
     * Verifies that the actual IProject is open.
     *
     * @return this assertion object.
     * @throws AssertionError - if the actual IProject is not open.
     */
    public ProjectAssert isOpen() {
        // check that actual IProject we want to make assertions on is not null.
        isNotNull();

        // we overrides the default error message with a more explicit one
        final String errorMessage = format("Expected actual IProject to be open but was not.", actual);

        // check
        if (!actual.isOpen()) {
            throw new AssertionError(errorMessage);
        }

        // return the current assertion for method chaining
        return this;
    }

    /**
     * Verifies that the actual IProject is not open.
     *
     * @return this assertion object.
     * @throws AssertionError - if the actual IProject is open.
     */
    public ProjectAssert isNotOpen() {
        // check that actual IProject we want to make assertions on is not null.
        isNotNull();

        // we overrides the default error message with a more explicit one
        final String errorMessage = format("Expected actual IProject not to be open but was.", actual);

        // check
        if (actual.isOpen()) {
            throw new AssertionError(errorMessage);
        }

        // return the current assertion for method chaining
        return this;
    }

    /**
     * Verifies that the actual IProject's referencedProjects contains the given IProject elements.
     *
     * @param referencedProjects the given elements that should be contained in actual IProject's referencedProjects.
     * @return this assertion object.
     * @throws CoreException
     * @throws AssertionError if the actual IProject's referencedProjects does not contain all given IProject elements.
     */
    public ProjectAssert hasReferencedProjects(final IProject... referencedProjects) throws CoreException {
        // check that actual IProject we want to make assertions on is not null.
        isNotNull();

        // check that given IProject varargs is not null.
        if (referencedProjects == null) {
            throw new AssertionError("Expecting referencedProjects parameter not to be null.");
        }

        // check with standard error message (see commented below to set your own message).
        Assertions.assertThat(actual.getReferencedProjects()).contains(referencedProjects);

        // uncomment the 4 lines below if you want to build your own error message :
        // WritableAssertionInfo assertionInfo = new WritableAssertionInfo();
        // String errorMessage = "my error message";
        // assertionInfo.overridingErrorMessage(errorMessage);
        // Iterables.instance().assertContains(assertionInfo, actual.getTeamMates(), teamMates);

        // return the current assertion for method chaining
        return this;
    }

    /**
     * Verifies that the actual IProject has no referencedProjects.
     *
     * @return this assertion object.
     * @throws CoreException
     * @throws AssertionError if the actual IProject's referencedProjects is not empty.
     */
    public ProjectAssert hasNoReferencedProjects() throws CoreException {
        // check that actual IProject we want to make assertions on is not null.
        isNotNull();

        // we overrides the default error message with a more explicit one
        final String errorMessage = format("\nExpected :\n  <%s>\nnot to have referencedProjects but had :\n  <%s>", actual,
                java.util.Arrays.toString(actual.getReferencedProjects()));

        // check
        if (actual.getReferencedProjects().length > 0) {
            throw new AssertionError(errorMessage);
        }

        // return the current assertion for method chaining
        return this;
    }

    /**
     * Verifies that the actual IProject's referencingProjects contains the given IProject elements.
     *
     * @param referencingProjects the given elements that should be contained in actual IProject's referencingProjects.
     * @return this assertion object.
     * @throws AssertionError if the actual IProject's referencingProjects does not contain all given IProject elements.
     */
    public ProjectAssert hasReferencingProjects(final IProject... referencingProjects) {
        // check that actual IProject we want to make assertions on is not null.
        isNotNull();

        // check that given IProject varargs is not null.
        if (referencingProjects == null) {
            throw new AssertionError("Expecting referencingProjects parameter not to be null.");
        }

        // check with standard error message (see commented below to set your own message).
        Assertions.assertThat(actual.getReferencingProjects()).contains(referencingProjects);

        // uncomment the 4 lines below if you want to build your own error message :
        // WritableAssertionInfo assertionInfo = new WritableAssertionInfo();
        // String errorMessage = "my error message";
        // assertionInfo.overridingErrorMessage(errorMessage);
        // Iterables.instance().assertContains(assertionInfo, actual.getTeamMates(), teamMates);

        // return the current assertion for method chaining
        return this;
    }

    /**
     * Verifies that the actual IProject has no referencingProjects.
     *
     * @return this assertion object.
     * @throws AssertionError if the actual IProject's referencingProjects is not empty.
     */
    public ProjectAssert hasNoReferencingProjects() {
        // check that actual IProject we want to make assertions on is not null.
        isNotNull();

        // we overrides the default error message with a more explicit one
        final String errorMessage = format("\nExpected :\n  <%s>\nnot to have referencingProjects but had :\n  <%s>", actual,
                java.util.Arrays.toString(actual.getReferencingProjects()));

        // check
        if (actual.getReferencingProjects().length > 0) {
            throw new AssertionError(errorMessage);
        }

        // return the current assertion for method chaining
        return this;
    }

}
