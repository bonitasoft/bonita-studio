/*
* generated by Xtext
*/
package org.bonitasoft.studio.condition.ui.contentassist.antlr;

import java.util.Collection;
import java.util.Map;
import java.util.HashMap;

import org.antlr.runtime.RecognitionException;
import org.eclipse.xtext.AbstractElement;
import org.eclipse.xtext.ui.editor.contentassist.antlr.AbstractContentAssistParser;
import org.eclipse.xtext.ui.editor.contentassist.antlr.FollowElement;
import org.eclipse.xtext.ui.editor.contentassist.antlr.internal.AbstractInternalContentAssistParser;

import com.google.inject.Inject;

import org.bonitasoft.studio.condition.services.ConditionModelGrammarAccess;

public class ConditionModelParser extends AbstractContentAssistParser {
	
	@Inject
	private ConditionModelGrammarAccess grammarAccess;
	
	private Map<AbstractElement, String> nameMappings;
	
	@Override
	protected org.bonitasoft.studio.condition.ui.contentassist.antlr.internal.InternalConditionModelParser createParser() {
		org.bonitasoft.studio.condition.ui.contentassist.antlr.internal.InternalConditionModelParser result = new org.bonitasoft.studio.condition.ui.contentassist.antlr.internal.InternalConditionModelParser(null);
		result.setGrammarAccess(grammarAccess);
		return result;
	}
	
	@Override
	protected String getRuleName(AbstractElement element) {
		if (nameMappings == null) {
			nameMappings = new HashMap<AbstractElement, String>() {
				private static final long serialVersionUID = 1L;
				{
					put(grammarAccess.getOperation_CompareAccess().getOpAlternatives_1_0(), "rule__Operation_Compare__OpAlternatives_1_0");
					put(grammarAccess.getUnary_OperationAccess().getAlternatives(), "rule__Unary_Operation__Alternatives");
					put(grammarAccess.getOperationAccess().getAlternatives(), "rule__Operation__Alternatives");
					put(grammarAccess.getExpression_TerminalAccess().getAlternatives(), "rule__Expression_Terminal__Alternatives");
					put(grammarAccess.getOperation_CompareAccess().getGroup(), "rule__Operation_Compare__Group__0");
					put(grammarAccess.getOperation_Less_EqualsAccess().getGroup(), "rule__Operation_Less_Equals__Group__0");
					put(grammarAccess.getOperation_LessAccess().getGroup(), "rule__Operation_Less__Group__0");
					put(grammarAccess.getOperation_Greater_EqualsAccess().getGroup(), "rule__Operation_Greater_Equals__Group__0");
					put(grammarAccess.getOperation_GreaterAccess().getGroup(), "rule__Operation_Greater__Group__0");
					put(grammarAccess.getOperation_Not_EqualsAccess().getGroup(), "rule__Operation_Not_Equals__Group__0");
					put(grammarAccess.getOperation_EqualsAccess().getGroup(), "rule__Operation_Equals__Group__0");
					put(grammarAccess.getOperation_UnaryAccess().getGroup(), "rule__Operation_Unary__Group__0");
					put(grammarAccess.getOperation_NotUnaryAccess().getGroup(), "rule__Operation_NotUnary__Group__0");
					put(grammarAccess.getExpression_DoubleAccess().getGroup(), "rule__Expression_Double__Group__0");
					put(grammarAccess.getExpression_IntegerAccess().getGroup(), "rule__Expression_Integer__Group__0");
					put(grammarAccess.getExpression_StringAccess().getGroup(), "rule__Expression_String__Group__0");
					put(grammarAccess.getExpression_ProcessRefAccess().getGroup(), "rule__Expression_ProcessRef__Group__0");
					put(grammarAccess.getExpression_BooleanAccess().getGroup(), "rule__Expression_Boolean__Group__0");
					put(grammarAccess.getOperation_CompareAccess().getOpAssignment_1(), "rule__Operation_Compare__OpAssignment_1");
					put(grammarAccess.getOperation_Less_EqualsAccess().getLeftAssignment_1(), "rule__Operation_Less_Equals__LeftAssignment_1");
					put(grammarAccess.getOperation_Less_EqualsAccess().getRightAssignment_3(), "rule__Operation_Less_Equals__RightAssignment_3");
					put(grammarAccess.getOperation_LessAccess().getLeftAssignment_1(), "rule__Operation_Less__LeftAssignment_1");
					put(grammarAccess.getOperation_LessAccess().getRightAssignment_3(), "rule__Operation_Less__RightAssignment_3");
					put(grammarAccess.getOperation_Greater_EqualsAccess().getLeftAssignment_1(), "rule__Operation_Greater_Equals__LeftAssignment_1");
					put(grammarAccess.getOperation_Greater_EqualsAccess().getRightAssignment_3(), "rule__Operation_Greater_Equals__RightAssignment_3");
					put(grammarAccess.getOperation_GreaterAccess().getLeftAssignment_1(), "rule__Operation_Greater__LeftAssignment_1");
					put(grammarAccess.getOperation_GreaterAccess().getRightAssignment_3(), "rule__Operation_Greater__RightAssignment_3");
					put(grammarAccess.getOperation_Not_EqualsAccess().getLeftAssignment_1(), "rule__Operation_Not_Equals__LeftAssignment_1");
					put(grammarAccess.getOperation_Not_EqualsAccess().getRightAssignment_3(), "rule__Operation_Not_Equals__RightAssignment_3");
					put(grammarAccess.getOperation_EqualsAccess().getLeftAssignment_1(), "rule__Operation_Equals__LeftAssignment_1");
					put(grammarAccess.getOperation_EqualsAccess().getRightAssignment_3(), "rule__Operation_Equals__RightAssignment_3");
					put(grammarAccess.getOperation_UnaryAccess().getValueAssignment_1(), "rule__Operation_Unary__ValueAssignment_1");
					put(grammarAccess.getOperation_NotUnaryAccess().getValueAssignment_2(), "rule__Operation_NotUnary__ValueAssignment_2");
					put(grammarAccess.getExpression_DoubleAccess().getValueAssignment_1(), "rule__Expression_Double__ValueAssignment_1");
					put(grammarAccess.getExpression_IntegerAccess().getValueAssignment_1(), "rule__Expression_Integer__ValueAssignment_1");
					put(grammarAccess.getExpression_StringAccess().getValueAssignment_1(), "rule__Expression_String__ValueAssignment_1");
					put(grammarAccess.getExpression_ProcessRefAccess().getValueAssignment_1(), "rule__Expression_ProcessRef__ValueAssignment_1");
					put(grammarAccess.getExpression_BooleanAccess().getValueAssignment_1(), "rule__Expression_Boolean__ValueAssignment_1");
				}
			};
		}
		return nameMappings.get(element);
	}
	
	@Override
	protected Collection<FollowElement> getFollowElements(AbstractInternalContentAssistParser parser) {
		try {
			org.bonitasoft.studio.condition.ui.contentassist.antlr.internal.InternalConditionModelParser typedParser = (org.bonitasoft.studio.condition.ui.contentassist.antlr.internal.InternalConditionModelParser) parser;
			typedParser.entryRuleOperation_Compare();
			return typedParser.getFollowElements();
		} catch(RecognitionException ex) {
			throw new RuntimeException(ex);
		}		
	}
	
	@Override
	protected String[] getInitialHiddenTokens() {
		return new String[] { "RULE_WS" };
	}
	
	public ConditionModelGrammarAccess getGrammarAccess() {
		return this.grammarAccess;
	}
	
	public void setGrammarAccess(ConditionModelGrammarAccess grammarAccess) {
		this.grammarAccess = grammarAccess;
	}
}
