/*
* generated by Xtext
*/
grammar InternalConditionModel;

options {
	superClass=AbstractInternalContentAssistParser;
	
}

@lexer::header {
package org.bonitasoft.studio.condition.ui.contentassist.antlr.internal;

// Hack: Use our own Lexer superclass by means of import. 
// Currently there is no other way to specify the superclass for the lexer.
import org.eclipse.xtext.ui.editor.contentassist.antlr.internal.Lexer;
}

@parser::header {
package org.bonitasoft.studio.condition.ui.contentassist.antlr.internal; 

import java.io.InputStream;
import org.eclipse.xtext.*;
import org.eclipse.xtext.parser.*;
import org.eclipse.xtext.parser.impl.*;
import org.eclipse.emf.ecore.util.EcoreUtil;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.xtext.parser.antlr.XtextTokenStream;
import org.eclipse.xtext.parser.antlr.XtextTokenStream.HiddenTokens;
import org.eclipse.xtext.ui.editor.contentassist.antlr.internal.AbstractInternalContentAssistParser;
import org.eclipse.xtext.ui.editor.contentassist.antlr.internal.DFA;
import org.bonitasoft.studio.condition.services.ConditionModelGrammarAccess;

}

@parser::members {
 
 	private ConditionModelGrammarAccess grammarAccess;
 	
    public void setGrammarAccess(ConditionModelGrammarAccess grammarAccess) {
    	this.grammarAccess = grammarAccess;
    }
    
    @Override
    protected Grammar getGrammar() {
    	return grammarAccess.getGrammar();
    }
    
    @Override
    protected String getValueForTokenName(String tokenName) {
    	return tokenName;
    }

}




// Entry rule entryRuleOperation_Compare
entryRuleOperation_Compare 
:
{ before(grammarAccess.getOperation_CompareRule()); }
	 ruleOperation_Compare
{ after(grammarAccess.getOperation_CompareRule()); } 
	 EOF 
;

// Rule Operation_Compare
ruleOperation_Compare
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getOperation_CompareAccess().getGroup()); }
(rule__Operation_Compare__Group__0)
{ after(grammarAccess.getOperation_CompareAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleUnary_Operation
entryRuleUnary_Operation 
:
{ before(grammarAccess.getUnary_OperationRule()); }
	 ruleUnary_Operation
{ after(grammarAccess.getUnary_OperationRule()); } 
	 EOF 
;

// Rule Unary_Operation
ruleUnary_Operation
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getUnary_OperationAccess().getAlternatives()); }
(rule__Unary_Operation__Alternatives)
{ after(grammarAccess.getUnary_OperationAccess().getAlternatives()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleOperation
entryRuleOperation 
:
{ before(grammarAccess.getOperationRule()); }
	 ruleOperation
{ after(grammarAccess.getOperationRule()); } 
	 EOF 
;

// Rule Operation
ruleOperation
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getOperationAccess().getAlternatives()); }
(rule__Operation__Alternatives)
{ after(grammarAccess.getOperationAccess().getAlternatives()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleOperation_Less_Equals
entryRuleOperation_Less_Equals 
:
{ before(grammarAccess.getOperation_Less_EqualsRule()); }
	 ruleOperation_Less_Equals
{ after(grammarAccess.getOperation_Less_EqualsRule()); } 
	 EOF 
;

// Rule Operation_Less_Equals
ruleOperation_Less_Equals
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getOperation_Less_EqualsAccess().getGroup()); }
(rule__Operation_Less_Equals__Group__0)
{ after(grammarAccess.getOperation_Less_EqualsAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleOperation_Less
entryRuleOperation_Less 
:
{ before(grammarAccess.getOperation_LessRule()); }
	 ruleOperation_Less
{ after(grammarAccess.getOperation_LessRule()); } 
	 EOF 
;

// Rule Operation_Less
ruleOperation_Less
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getOperation_LessAccess().getGroup()); }
(rule__Operation_Less__Group__0)
{ after(grammarAccess.getOperation_LessAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleOperation_Greater_Equals
entryRuleOperation_Greater_Equals 
:
{ before(grammarAccess.getOperation_Greater_EqualsRule()); }
	 ruleOperation_Greater_Equals
{ after(grammarAccess.getOperation_Greater_EqualsRule()); } 
	 EOF 
;

// Rule Operation_Greater_Equals
ruleOperation_Greater_Equals
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getOperation_Greater_EqualsAccess().getGroup()); }
(rule__Operation_Greater_Equals__Group__0)
{ after(grammarAccess.getOperation_Greater_EqualsAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleOperation_Greater
entryRuleOperation_Greater 
:
{ before(grammarAccess.getOperation_GreaterRule()); }
	 ruleOperation_Greater
{ after(grammarAccess.getOperation_GreaterRule()); } 
	 EOF 
;

// Rule Operation_Greater
ruleOperation_Greater
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getOperation_GreaterAccess().getGroup()); }
(rule__Operation_Greater__Group__0)
{ after(grammarAccess.getOperation_GreaterAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleOperation_Not_Equals
entryRuleOperation_Not_Equals 
:
{ before(grammarAccess.getOperation_Not_EqualsRule()); }
	 ruleOperation_Not_Equals
{ after(grammarAccess.getOperation_Not_EqualsRule()); } 
	 EOF 
;

// Rule Operation_Not_Equals
ruleOperation_Not_Equals
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getOperation_Not_EqualsAccess().getGroup()); }
(rule__Operation_Not_Equals__Group__0)
{ after(grammarAccess.getOperation_Not_EqualsAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleOperation_Equals
entryRuleOperation_Equals 
:
{ before(grammarAccess.getOperation_EqualsRule()); }
	 ruleOperation_Equals
{ after(grammarAccess.getOperation_EqualsRule()); } 
	 EOF 
;

// Rule Operation_Equals
ruleOperation_Equals
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getOperation_EqualsAccess().getGroup()); }
(rule__Operation_Equals__Group__0)
{ after(grammarAccess.getOperation_EqualsAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleOperation_Unary
entryRuleOperation_Unary 
:
{ before(grammarAccess.getOperation_UnaryRule()); }
	 ruleOperation_Unary
{ after(grammarAccess.getOperation_UnaryRule()); } 
	 EOF 
;

// Rule Operation_Unary
ruleOperation_Unary
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getOperation_UnaryAccess().getGroup()); }
(rule__Operation_Unary__Group__0)
{ after(grammarAccess.getOperation_UnaryAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleOperation_NotUnary
entryRuleOperation_NotUnary 
:
{ before(grammarAccess.getOperation_NotUnaryRule()); }
	 ruleOperation_NotUnary
{ after(grammarAccess.getOperation_NotUnaryRule()); } 
	 EOF 
;

// Rule Operation_NotUnary
ruleOperation_NotUnary
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getOperation_NotUnaryAccess().getGroup()); }
(rule__Operation_NotUnary__Group__0)
{ after(grammarAccess.getOperation_NotUnaryAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleExpression_Terminal
entryRuleExpression_Terminal 
:
{ before(grammarAccess.getExpression_TerminalRule()); }
	 ruleExpression_Terminal
{ after(grammarAccess.getExpression_TerminalRule()); } 
	 EOF 
;

// Rule Expression_Terminal
ruleExpression_Terminal
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getExpression_TerminalAccess().getAlternatives()); }
(rule__Expression_Terminal__Alternatives)
{ after(grammarAccess.getExpression_TerminalAccess().getAlternatives()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleExpression_Double
entryRuleExpression_Double 
:
{ before(grammarAccess.getExpression_DoubleRule()); }
	 ruleExpression_Double
{ after(grammarAccess.getExpression_DoubleRule()); } 
	 EOF 
;

// Rule Expression_Double
ruleExpression_Double
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getExpression_DoubleAccess().getGroup()); }
(rule__Expression_Double__Group__0)
{ after(grammarAccess.getExpression_DoubleAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleExpression_Integer
entryRuleExpression_Integer 
:
{ before(grammarAccess.getExpression_IntegerRule()); }
	 ruleExpression_Integer
{ after(grammarAccess.getExpression_IntegerRule()); } 
	 EOF 
;

// Rule Expression_Integer
ruleExpression_Integer
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getExpression_IntegerAccess().getGroup()); }
(rule__Expression_Integer__Group__0)
{ after(grammarAccess.getExpression_IntegerAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleExpression_String
entryRuleExpression_String 
:
{ before(grammarAccess.getExpression_StringRule()); }
	 ruleExpression_String
{ after(grammarAccess.getExpression_StringRule()); } 
	 EOF 
;

// Rule Expression_String
ruleExpression_String
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getExpression_StringAccess().getGroup()); }
(rule__Expression_String__Group__0)
{ after(grammarAccess.getExpression_StringAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleExpression_ProcessRef
entryRuleExpression_ProcessRef 
@init {
	HiddenTokens myHiddenTokenState = ((XtextTokenStream)input).setHiddenTokens("RULE_WS");
}
:
{ before(grammarAccess.getExpression_ProcessRefRule()); }
	 ruleExpression_ProcessRef
{ after(grammarAccess.getExpression_ProcessRefRule()); } 
	 EOF 
;
finally {
	myHiddenTokenState.restore();
}

// Rule Expression_ProcessRef
ruleExpression_ProcessRef
    @init {
		HiddenTokens myHiddenTokenState = ((XtextTokenStream)input).setHiddenTokens("RULE_WS");
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getExpression_ProcessRefAccess().getGroup()); }
(rule__Expression_ProcessRef__Group__0)
{ after(grammarAccess.getExpression_ProcessRefAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
	myHiddenTokenState.restore();
}



// Entry rule entryRuleExpression_Boolean
entryRuleExpression_Boolean 
:
{ before(grammarAccess.getExpression_BooleanRule()); }
	 ruleExpression_Boolean
{ after(grammarAccess.getExpression_BooleanRule()); } 
	 EOF 
;

// Rule Expression_Boolean
ruleExpression_Boolean
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getExpression_BooleanAccess().getGroup()); }
(rule__Expression_Boolean__Group__0)
{ after(grammarAccess.getExpression_BooleanAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}




rule__Operation_Compare__OpAlternatives_1_0
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getOperation_CompareAccess().getOpOperationParserRuleCall_1_0_0()); }
	ruleOperation
{ after(grammarAccess.getOperation_CompareAccess().getOpOperationParserRuleCall_1_0_0()); }
)

    |(
{ before(grammarAccess.getOperation_CompareAccess().getOpUnary_OperationParserRuleCall_1_0_1()); }
	ruleUnary_Operation
{ after(grammarAccess.getOperation_CompareAccess().getOpUnary_OperationParserRuleCall_1_0_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Unary_Operation__Alternatives
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getUnary_OperationAccess().getOperation_UnaryParserRuleCall_0()); }
	ruleOperation_Unary
{ after(grammarAccess.getUnary_OperationAccess().getOperation_UnaryParserRuleCall_0()); }
)

    |(
{ before(grammarAccess.getUnary_OperationAccess().getOperation_NotUnaryParserRuleCall_1()); }
	ruleOperation_NotUnary
{ after(grammarAccess.getUnary_OperationAccess().getOperation_NotUnaryParserRuleCall_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Operation__Alternatives
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getOperationAccess().getOperation_Less_EqualsParserRuleCall_0()); }
	ruleOperation_Less_Equals
{ after(grammarAccess.getOperationAccess().getOperation_Less_EqualsParserRuleCall_0()); }
)

    |(
{ before(grammarAccess.getOperationAccess().getOperation_LessParserRuleCall_1()); }
	ruleOperation_Less
{ after(grammarAccess.getOperationAccess().getOperation_LessParserRuleCall_1()); }
)

    |(
{ before(grammarAccess.getOperationAccess().getOperation_Greater_EqualsParserRuleCall_2()); }
	ruleOperation_Greater_Equals
{ after(grammarAccess.getOperationAccess().getOperation_Greater_EqualsParserRuleCall_2()); }
)

    |(
{ before(grammarAccess.getOperationAccess().getOperation_GreaterParserRuleCall_3()); }
	ruleOperation_Greater
{ after(grammarAccess.getOperationAccess().getOperation_GreaterParserRuleCall_3()); }
)

    |(
{ before(grammarAccess.getOperationAccess().getOperation_Not_EqualsParserRuleCall_4()); }
	ruleOperation_Not_Equals
{ after(grammarAccess.getOperationAccess().getOperation_Not_EqualsParserRuleCall_4()); }
)

    |(
{ before(grammarAccess.getOperationAccess().getOperation_EqualsParserRuleCall_5()); }
	ruleOperation_Equals
{ after(grammarAccess.getOperationAccess().getOperation_EqualsParserRuleCall_5()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Expression_Terminal__Alternatives
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getExpression_TerminalAccess().getExpression_DoubleParserRuleCall_0()); }
	ruleExpression_Double
{ after(grammarAccess.getExpression_TerminalAccess().getExpression_DoubleParserRuleCall_0()); }
)

    |(
{ before(grammarAccess.getExpression_TerminalAccess().getExpression_IntegerParserRuleCall_1()); }
	ruleExpression_Integer
{ after(grammarAccess.getExpression_TerminalAccess().getExpression_IntegerParserRuleCall_1()); }
)

    |(
{ before(grammarAccess.getExpression_TerminalAccess().getExpression_BooleanParserRuleCall_2()); }
	ruleExpression_Boolean
{ after(grammarAccess.getExpression_TerminalAccess().getExpression_BooleanParserRuleCall_2()); }
)

    |(
{ before(grammarAccess.getExpression_TerminalAccess().getExpression_StringParserRuleCall_3()); }
	ruleExpression_String
{ after(grammarAccess.getExpression_TerminalAccess().getExpression_StringParserRuleCall_3()); }
)

    |(
{ before(grammarAccess.getExpression_TerminalAccess().getExpression_ProcessRefParserRuleCall_4()); }
	ruleExpression_ProcessRef
{ after(grammarAccess.getExpression_TerminalAccess().getExpression_ProcessRefParserRuleCall_4()); }
)

;
finally {
	restoreStackSize(stackSize);
}



rule__Operation_Compare__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Operation_Compare__Group__0__Impl
	rule__Operation_Compare__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Operation_Compare__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getOperation_CompareAccess().getOperation_CompareAction_0()); }
(

)
{ after(grammarAccess.getOperation_CompareAccess().getOperation_CompareAction_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Operation_Compare__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Operation_Compare__Group__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Operation_Compare__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getOperation_CompareAccess().getOpAssignment_1()); }
(rule__Operation_Compare__OpAssignment_1)
{ after(grammarAccess.getOperation_CompareAccess().getOpAssignment_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__Operation_Less_Equals__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Operation_Less_Equals__Group__0__Impl
	rule__Operation_Less_Equals__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Operation_Less_Equals__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getOperation_Less_EqualsAccess().getOperation_Less_EqualsAction_0()); }
(

)
{ after(grammarAccess.getOperation_Less_EqualsAccess().getOperation_Less_EqualsAction_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Operation_Less_Equals__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Operation_Less_Equals__Group__1__Impl
	rule__Operation_Less_Equals__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__Operation_Less_Equals__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getOperation_Less_EqualsAccess().getLeftAssignment_1()); }
(rule__Operation_Less_Equals__LeftAssignment_1)
{ after(grammarAccess.getOperation_Less_EqualsAccess().getLeftAssignment_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Operation_Less_Equals__Group__2
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Operation_Less_Equals__Group__2__Impl
	rule__Operation_Less_Equals__Group__3
;
finally {
	restoreStackSize(stackSize);
}

rule__Operation_Less_Equals__Group__2__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getOperation_Less_EqualsAccess().getLessThanSignEqualsSignKeyword_2()); }

	'<=' 

{ after(grammarAccess.getOperation_Less_EqualsAccess().getLessThanSignEqualsSignKeyword_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Operation_Less_Equals__Group__3
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Operation_Less_Equals__Group__3__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Operation_Less_Equals__Group__3__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getOperation_Less_EqualsAccess().getRightAssignment_3()); }
(rule__Operation_Less_Equals__RightAssignment_3)
{ after(grammarAccess.getOperation_Less_EqualsAccess().getRightAssignment_3()); }
)

;
finally {
	restoreStackSize(stackSize);
}










rule__Operation_Less__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Operation_Less__Group__0__Impl
	rule__Operation_Less__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Operation_Less__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getOperation_LessAccess().getOperation_LessAction_0()); }
(

)
{ after(grammarAccess.getOperation_LessAccess().getOperation_LessAction_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Operation_Less__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Operation_Less__Group__1__Impl
	rule__Operation_Less__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__Operation_Less__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getOperation_LessAccess().getLeftAssignment_1()); }
(rule__Operation_Less__LeftAssignment_1)
{ after(grammarAccess.getOperation_LessAccess().getLeftAssignment_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Operation_Less__Group__2
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Operation_Less__Group__2__Impl
	rule__Operation_Less__Group__3
;
finally {
	restoreStackSize(stackSize);
}

rule__Operation_Less__Group__2__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getOperation_LessAccess().getLessThanSignKeyword_2()); }

	'<' 

{ after(grammarAccess.getOperation_LessAccess().getLessThanSignKeyword_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Operation_Less__Group__3
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Operation_Less__Group__3__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Operation_Less__Group__3__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getOperation_LessAccess().getRightAssignment_3()); }
(rule__Operation_Less__RightAssignment_3)
{ after(grammarAccess.getOperation_LessAccess().getRightAssignment_3()); }
)

;
finally {
	restoreStackSize(stackSize);
}










rule__Operation_Greater_Equals__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Operation_Greater_Equals__Group__0__Impl
	rule__Operation_Greater_Equals__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Operation_Greater_Equals__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getOperation_Greater_EqualsAccess().getOperation_Greater_EqualsAction_0()); }
(

)
{ after(grammarAccess.getOperation_Greater_EqualsAccess().getOperation_Greater_EqualsAction_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Operation_Greater_Equals__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Operation_Greater_Equals__Group__1__Impl
	rule__Operation_Greater_Equals__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__Operation_Greater_Equals__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getOperation_Greater_EqualsAccess().getLeftAssignment_1()); }
(rule__Operation_Greater_Equals__LeftAssignment_1)
{ after(grammarAccess.getOperation_Greater_EqualsAccess().getLeftAssignment_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Operation_Greater_Equals__Group__2
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Operation_Greater_Equals__Group__2__Impl
	rule__Operation_Greater_Equals__Group__3
;
finally {
	restoreStackSize(stackSize);
}

rule__Operation_Greater_Equals__Group__2__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getOperation_Greater_EqualsAccess().getGreaterThanSignEqualsSignKeyword_2()); }

	'>=' 

{ after(grammarAccess.getOperation_Greater_EqualsAccess().getGreaterThanSignEqualsSignKeyword_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Operation_Greater_Equals__Group__3
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Operation_Greater_Equals__Group__3__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Operation_Greater_Equals__Group__3__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getOperation_Greater_EqualsAccess().getRightAssignment_3()); }
(rule__Operation_Greater_Equals__RightAssignment_3)
{ after(grammarAccess.getOperation_Greater_EqualsAccess().getRightAssignment_3()); }
)

;
finally {
	restoreStackSize(stackSize);
}










rule__Operation_Greater__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Operation_Greater__Group__0__Impl
	rule__Operation_Greater__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Operation_Greater__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getOperation_GreaterAccess().getOperation_GreaterAction_0()); }
(

)
{ after(grammarAccess.getOperation_GreaterAccess().getOperation_GreaterAction_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Operation_Greater__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Operation_Greater__Group__1__Impl
	rule__Operation_Greater__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__Operation_Greater__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getOperation_GreaterAccess().getLeftAssignment_1()); }
(rule__Operation_Greater__LeftAssignment_1)
{ after(grammarAccess.getOperation_GreaterAccess().getLeftAssignment_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Operation_Greater__Group__2
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Operation_Greater__Group__2__Impl
	rule__Operation_Greater__Group__3
;
finally {
	restoreStackSize(stackSize);
}

rule__Operation_Greater__Group__2__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getOperation_GreaterAccess().getGreaterThanSignKeyword_2()); }

	'>' 

{ after(grammarAccess.getOperation_GreaterAccess().getGreaterThanSignKeyword_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Operation_Greater__Group__3
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Operation_Greater__Group__3__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Operation_Greater__Group__3__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getOperation_GreaterAccess().getRightAssignment_3()); }
(rule__Operation_Greater__RightAssignment_3)
{ after(grammarAccess.getOperation_GreaterAccess().getRightAssignment_3()); }
)

;
finally {
	restoreStackSize(stackSize);
}










rule__Operation_Not_Equals__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Operation_Not_Equals__Group__0__Impl
	rule__Operation_Not_Equals__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Operation_Not_Equals__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getOperation_Not_EqualsAccess().getOperation_Not_EqualsAction_0()); }
(

)
{ after(grammarAccess.getOperation_Not_EqualsAccess().getOperation_Not_EqualsAction_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Operation_Not_Equals__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Operation_Not_Equals__Group__1__Impl
	rule__Operation_Not_Equals__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__Operation_Not_Equals__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getOperation_Not_EqualsAccess().getLeftAssignment_1()); }
(rule__Operation_Not_Equals__LeftAssignment_1)
{ after(grammarAccess.getOperation_Not_EqualsAccess().getLeftAssignment_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Operation_Not_Equals__Group__2
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Operation_Not_Equals__Group__2__Impl
	rule__Operation_Not_Equals__Group__3
;
finally {
	restoreStackSize(stackSize);
}

rule__Operation_Not_Equals__Group__2__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getOperation_Not_EqualsAccess().getExclamationMarkEqualsSignKeyword_2()); }

	'!=' 

{ after(grammarAccess.getOperation_Not_EqualsAccess().getExclamationMarkEqualsSignKeyword_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Operation_Not_Equals__Group__3
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Operation_Not_Equals__Group__3__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Operation_Not_Equals__Group__3__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getOperation_Not_EqualsAccess().getRightAssignment_3()); }
(rule__Operation_Not_Equals__RightAssignment_3)
{ after(grammarAccess.getOperation_Not_EqualsAccess().getRightAssignment_3()); }
)

;
finally {
	restoreStackSize(stackSize);
}










rule__Operation_Equals__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Operation_Equals__Group__0__Impl
	rule__Operation_Equals__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Operation_Equals__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getOperation_EqualsAccess().getOperation_EqualsAction_0()); }
(

)
{ after(grammarAccess.getOperation_EqualsAccess().getOperation_EqualsAction_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Operation_Equals__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Operation_Equals__Group__1__Impl
	rule__Operation_Equals__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__Operation_Equals__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getOperation_EqualsAccess().getLeftAssignment_1()); }
(rule__Operation_Equals__LeftAssignment_1)
{ after(grammarAccess.getOperation_EqualsAccess().getLeftAssignment_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Operation_Equals__Group__2
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Operation_Equals__Group__2__Impl
	rule__Operation_Equals__Group__3
;
finally {
	restoreStackSize(stackSize);
}

rule__Operation_Equals__Group__2__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getOperation_EqualsAccess().getEqualsSignEqualsSignKeyword_2()); }

	'==' 

{ after(grammarAccess.getOperation_EqualsAccess().getEqualsSignEqualsSignKeyword_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Operation_Equals__Group__3
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Operation_Equals__Group__3__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Operation_Equals__Group__3__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getOperation_EqualsAccess().getRightAssignment_3()); }
(rule__Operation_Equals__RightAssignment_3)
{ after(grammarAccess.getOperation_EqualsAccess().getRightAssignment_3()); }
)

;
finally {
	restoreStackSize(stackSize);
}










rule__Operation_Unary__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Operation_Unary__Group__0__Impl
	rule__Operation_Unary__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Operation_Unary__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getOperation_UnaryAccess().getOperation_UnaryAction_0()); }
(

)
{ after(grammarAccess.getOperation_UnaryAccess().getOperation_UnaryAction_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Operation_Unary__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Operation_Unary__Group__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Operation_Unary__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getOperation_UnaryAccess().getValueAssignment_1()); }
(rule__Operation_Unary__ValueAssignment_1)
{ after(grammarAccess.getOperation_UnaryAccess().getValueAssignment_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__Operation_NotUnary__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Operation_NotUnary__Group__0__Impl
	rule__Operation_NotUnary__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Operation_NotUnary__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getOperation_NotUnaryAccess().getOperation_NotUnaryAction_0()); }
(

)
{ after(grammarAccess.getOperation_NotUnaryAccess().getOperation_NotUnaryAction_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Operation_NotUnary__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Operation_NotUnary__Group__1__Impl
	rule__Operation_NotUnary__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__Operation_NotUnary__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getOperation_NotUnaryAccess().getExclamationMarkKeyword_1()); }

	'!' 

{ after(grammarAccess.getOperation_NotUnaryAccess().getExclamationMarkKeyword_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Operation_NotUnary__Group__2
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Operation_NotUnary__Group__2__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Operation_NotUnary__Group__2__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getOperation_NotUnaryAccess().getValueAssignment_2()); }
(rule__Operation_NotUnary__ValueAssignment_2)
{ after(grammarAccess.getOperation_NotUnaryAccess().getValueAssignment_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}








rule__Expression_Double__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Expression_Double__Group__0__Impl
	rule__Expression_Double__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Expression_Double__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getExpression_DoubleAccess().getExpression_DoubleAction_0()); }
(

)
{ after(grammarAccess.getExpression_DoubleAccess().getExpression_DoubleAction_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Expression_Double__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Expression_Double__Group__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Expression_Double__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getExpression_DoubleAccess().getValueAssignment_1()); }
(rule__Expression_Double__ValueAssignment_1)
{ after(grammarAccess.getExpression_DoubleAccess().getValueAssignment_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__Expression_Integer__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Expression_Integer__Group__0__Impl
	rule__Expression_Integer__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Expression_Integer__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getExpression_IntegerAccess().getExpression_IntegerAction_0()); }
(

)
{ after(grammarAccess.getExpression_IntegerAccess().getExpression_IntegerAction_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Expression_Integer__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Expression_Integer__Group__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Expression_Integer__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getExpression_IntegerAccess().getValueAssignment_1()); }
(rule__Expression_Integer__ValueAssignment_1)
{ after(grammarAccess.getExpression_IntegerAccess().getValueAssignment_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__Expression_String__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Expression_String__Group__0__Impl
	rule__Expression_String__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Expression_String__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getExpression_StringAccess().getExpression_StringAction_0()); }
(

)
{ after(grammarAccess.getExpression_StringAccess().getExpression_StringAction_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Expression_String__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Expression_String__Group__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Expression_String__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getExpression_StringAccess().getValueAssignment_1()); }
(rule__Expression_String__ValueAssignment_1)
{ after(grammarAccess.getExpression_StringAccess().getValueAssignment_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__Expression_ProcessRef__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Expression_ProcessRef__Group__0__Impl
	rule__Expression_ProcessRef__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Expression_ProcessRef__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getExpression_ProcessRefAccess().getExpression_ProcessRefAction_0()); }
(

)
{ after(grammarAccess.getExpression_ProcessRefAccess().getExpression_ProcessRefAction_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Expression_ProcessRef__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Expression_ProcessRef__Group__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Expression_ProcessRef__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getExpression_ProcessRefAccess().getValueAssignment_1()); }
(rule__Expression_ProcessRef__ValueAssignment_1)
{ after(grammarAccess.getExpression_ProcessRefAccess().getValueAssignment_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__Expression_Boolean__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Expression_Boolean__Group__0__Impl
	rule__Expression_Boolean__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Expression_Boolean__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getExpression_BooleanAccess().getExpression_BooleanAction_0()); }
(

)
{ after(grammarAccess.getExpression_BooleanAccess().getExpression_BooleanAction_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Expression_Boolean__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Expression_Boolean__Group__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Expression_Boolean__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getExpression_BooleanAccess().getValueAssignment_1()); }
(rule__Expression_Boolean__ValueAssignment_1)
{ after(grammarAccess.getExpression_BooleanAccess().getValueAssignment_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}







rule__Operation_Compare__OpAssignment_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getOperation_CompareAccess().getOpAlternatives_1_0()); }
(rule__Operation_Compare__OpAlternatives_1_0)
{ after(grammarAccess.getOperation_CompareAccess().getOpAlternatives_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Operation_Less_Equals__LeftAssignment_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getOperation_Less_EqualsAccess().getLeftExpression_TerminalParserRuleCall_1_0()); }
	ruleExpression_Terminal{ after(grammarAccess.getOperation_Less_EqualsAccess().getLeftExpression_TerminalParserRuleCall_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Operation_Less_Equals__RightAssignment_3
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getOperation_Less_EqualsAccess().getRightExpression_TerminalParserRuleCall_3_0()); }
	ruleExpression_Terminal{ after(grammarAccess.getOperation_Less_EqualsAccess().getRightExpression_TerminalParserRuleCall_3_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Operation_Less__LeftAssignment_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getOperation_LessAccess().getLeftExpression_TerminalParserRuleCall_1_0()); }
	ruleExpression_Terminal{ after(grammarAccess.getOperation_LessAccess().getLeftExpression_TerminalParserRuleCall_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Operation_Less__RightAssignment_3
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getOperation_LessAccess().getRightExpression_TerminalParserRuleCall_3_0()); }
	ruleExpression_Terminal{ after(grammarAccess.getOperation_LessAccess().getRightExpression_TerminalParserRuleCall_3_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Operation_Greater_Equals__LeftAssignment_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getOperation_Greater_EqualsAccess().getLeftExpression_TerminalParserRuleCall_1_0()); }
	ruleExpression_Terminal{ after(grammarAccess.getOperation_Greater_EqualsAccess().getLeftExpression_TerminalParserRuleCall_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Operation_Greater_Equals__RightAssignment_3
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getOperation_Greater_EqualsAccess().getRightExpression_TerminalParserRuleCall_3_0()); }
	ruleExpression_Terminal{ after(grammarAccess.getOperation_Greater_EqualsAccess().getRightExpression_TerminalParserRuleCall_3_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Operation_Greater__LeftAssignment_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getOperation_GreaterAccess().getLeftExpression_TerminalParserRuleCall_1_0()); }
	ruleExpression_Terminal{ after(grammarAccess.getOperation_GreaterAccess().getLeftExpression_TerminalParserRuleCall_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Operation_Greater__RightAssignment_3
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getOperation_GreaterAccess().getRightExpression_TerminalParserRuleCall_3_0()); }
	ruleExpression_Terminal{ after(grammarAccess.getOperation_GreaterAccess().getRightExpression_TerminalParserRuleCall_3_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Operation_Not_Equals__LeftAssignment_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getOperation_Not_EqualsAccess().getLeftExpression_TerminalParserRuleCall_1_0()); }
	ruleExpression_Terminal{ after(grammarAccess.getOperation_Not_EqualsAccess().getLeftExpression_TerminalParserRuleCall_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Operation_Not_Equals__RightAssignment_3
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getOperation_Not_EqualsAccess().getRightExpression_TerminalParserRuleCall_3_0()); }
	ruleExpression_Terminal{ after(grammarAccess.getOperation_Not_EqualsAccess().getRightExpression_TerminalParserRuleCall_3_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Operation_Equals__LeftAssignment_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getOperation_EqualsAccess().getLeftExpression_TerminalParserRuleCall_1_0()); }
	ruleExpression_Terminal{ after(grammarAccess.getOperation_EqualsAccess().getLeftExpression_TerminalParserRuleCall_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Operation_Equals__RightAssignment_3
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getOperation_EqualsAccess().getRightExpression_TerminalParserRuleCall_3_0()); }
	ruleExpression_Terminal{ after(grammarAccess.getOperation_EqualsAccess().getRightExpression_TerminalParserRuleCall_3_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Operation_Unary__ValueAssignment_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getOperation_UnaryAccess().getValueExpression_TerminalParserRuleCall_1_0()); }
	ruleExpression_Terminal{ after(grammarAccess.getOperation_UnaryAccess().getValueExpression_TerminalParserRuleCall_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Operation_NotUnary__ValueAssignment_2
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getOperation_NotUnaryAccess().getValueExpression_TerminalParserRuleCall_2_0()); }
	ruleExpression_Terminal{ after(grammarAccess.getOperation_NotUnaryAccess().getValueExpression_TerminalParserRuleCall_2_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Expression_Double__ValueAssignment_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getExpression_DoubleAccess().getValueDOUBLETerminalRuleCall_1_0()); }
	RULE_DOUBLE{ after(grammarAccess.getExpression_DoubleAccess().getValueDOUBLETerminalRuleCall_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Expression_Integer__ValueAssignment_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getExpression_IntegerAccess().getValueLONGTerminalRuleCall_1_0()); }
	RULE_LONG{ after(grammarAccess.getExpression_IntegerAccess().getValueLONGTerminalRuleCall_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Expression_String__ValueAssignment_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getExpression_StringAccess().getValueSTRINGTerminalRuleCall_1_0()); }
	RULE_STRING{ after(grammarAccess.getExpression_StringAccess().getValueSTRINGTerminalRuleCall_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Expression_ProcessRef__ValueAssignment_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getExpression_ProcessRefAccess().getValueEObjectCrossReference_1_0()); }
(
{ before(grammarAccess.getExpression_ProcessRefAccess().getValueEObjectIDTerminalRuleCall_1_0_1()); }
	RULE_ID{ after(grammarAccess.getExpression_ProcessRefAccess().getValueEObjectIDTerminalRuleCall_1_0_1()); }
)
{ after(grammarAccess.getExpression_ProcessRefAccess().getValueEObjectCrossReference_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Expression_Boolean__ValueAssignment_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getExpression_BooleanAccess().getValueBOOLEANTerminalRuleCall_1_0()); }
	RULE_BOOLEAN{ after(grammarAccess.getExpression_BooleanAccess().getValueBOOLEANTerminalRuleCall_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


RULE_UTF8_CHARACTERS : '\u00C0'..'\uFEFF';

RULE_WS : (' '|'\t'|'\r'|'\n')+;

RULE_BOOLEAN : ('true'|'false');

RULE_DATE : '\'' ~('\'')* '\'';

RULE_LONG : '-'? ('0'..'9')+;

RULE_DOUBLE : '-'? RULE_INT '.' RULE_INT;

RULE_ID : ('a'..'z'|'A'..'Z'|'_'|RULE_UTF8_CHARACTERS) ('a'..'z'|'A'..'Z'|'_'|'0'..'9'|RULE_UTF8_CHARACTERS)*;

RULE_INT : ('0'..'9')+;

RULE_STRING : ('"' ('\\' ('b'|'t'|'n'|'f'|'r'|'u'|'"'|'\''|'\\')|~(('\\'|'"')))* '"'|'\'' ('\\' ('b'|'t'|'n'|'f'|'r'|'u'|'"'|'\''|'\\')|~(('\\'|'\'')))* '\'');

RULE_ML_COMMENT : '/*' ( options {greedy=false;} : . )*'*/';

RULE_SL_COMMENT : '//' ~(('\n'|'\r'))* ('\r'? '\n')?;

RULE_ANY_OTHER : .;


