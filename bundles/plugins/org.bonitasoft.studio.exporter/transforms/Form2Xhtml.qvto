/**
 * Copyright (C) 2009 BonitaSoft S.A.
 * BonitaSoft, 31 rue Gustave Eiffel - 38000 Grenoble
 *
 * This program is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 2.0 of the License, or
 * (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program.  If not, see <http://www.gnu.org/licenses/>.
 */
modeltype FORM "strict" uses 'http://www.bonitasoft.org/ns/studio/form';
modeltype Xhtml "strict" uses 'http://www.w3.org/1999/xhtml';
modeltype PROC "strict" uses 'http://www.bonitasoft.org/ns/studio/process';
modeltype Ecore "strict" uses 'http://www.eclipse.org/emf/2002/Ecore';



/*
 *  @author Baptiste Mesta
 * 
 *   Create a template in xhtml for the given form
 */
transformation Form2Xhtml(in form : FORM, out xhtml : Xhtml){

property rowNumber : Integer = 0;
property rowMax : Integer = 0;
property colNumber : Integer = 0;
property colMax : Integer = 0;
property temp : Integer = 0;
property tableTemp : TableType = null;
property haveWidget :Boolean = false;

main() {
	form.rootObjects()[FORM::Form]->asOrderedSet()->map form2Xhtml()->asOrderedSet();
}
mapping FORM::Form::form2Xhtml() : Xhtml::DivType {
	id := getFormId(self);
	div += object DivType {
		_class := "bonita_form_container";
		div += object DivType {
			_class = "bonita_form_page_validation_container";
			text := " ";
			div += object DivType{
				_class="bonita_form_page_validation_container";
				text := " ";
				div += self.validators.createValid();
			};
		};	
		table += self.fillTable();	
		div += object DivType {
			_class = "bonita_form_page_validation_container";
			text := " ";
			div += object DivType{
				_class="bonita_form_page_validation_container";
				text := " ";
				div += self.validators.createValidBelow();
			};
		};	
	};
}	


helper FORM::Form::fillTable() : TableType {
	tableTemp := object TableType {
						width := "100%";
	};
	var formId : String := getFormId(self);
	
	//init the tr and rows
    rowNumber := 0;
    rowMax := self.nLine;
	colMax := self.nColumn;
	colNumber := 0;
	tableTemp._class := "bonita_table_container";
	tableTemp.width := "100%";
	tableTemp.colgroup += object ColgroupType{
		
		while(colNumber < colMax){
			col += object ColType{
				var column :Column = self.getColumn(colNumber);
				_class := formId+"_Column"+colNumber.toString();
			};
			colNumber := colNumber +1;
		};
	};
	
    while(rowNumber<rowMax){
		tableTemp.tr += object TrType{
			
			_class := formId+"_Row"+rowNumber.toString();
			colNumber := 0;
			while(colNumber < colMax){
				td+= if(self.haveWidgetHere(rowNumber,colNumber))
				 then self.widgets.map widgets2tds(formId)
				 else self.emptyTd(colNumber,rowNumber) endif;
				colNumber := colNumber +1;
			};
		};
		rowNumber := rowNumber + 1;
    };
	
	
	return tableTemp;
}

/**
 *
 * return an id for the form
 */
query getFormId(in aForm:Form) : String {
	//As a hack, the form type (ENTRY,VIEW,RECAP) and its id are stored in the documentation feature of the model
	return aForm.documentation;
}

/**
 *
 * return true if the pageflow conaints a form with the same name than form
 */
query PROC::PageFlow::containsForm(in aForm: Form) : Boolean{
	
	return self.form->select(f : Form | f.=(aForm))->notEmpty();
}

helper FORM::Form::emptyTd(in currentRow :Integer, currentLine : Integer ) : Sequence(TdType){
	var tds :Sequence(TdType) = null;
	if(self.isCellEmpty(currentRow,currentLine)) then
	tds += object TdType{
		text := " ";
	}
	endif;
	return tds;
}

/**
 *
 * return true if we should add a cell here 
 * i.e. no widget are one this cell (with their span too)
 */
query FORM::Form::isCellEmpty(in currentRow :Integer, currentLine : Integer ) : Boolean{
	var isEmpty : Boolean = true;
	var isEmptyTemp : Boolean = true;
	self.widgets->forEach(w){
		isEmptyTemp :=(currentLine<w.widgetLayoutInfo.line)
	   						.or(currentLine>=(w.widgetLayoutInfo.line+w.widgetLayoutInfo.verticalSpan))
	   						.or(currentRow<w.widgetLayoutInfo.column)
	   						.or(currentRow>=(w.widgetLayoutInfo.column+w.widgetLayoutInfo.horizontalSpan));
	   isEmpty := isEmpty.and(isEmptyTemp);
	   if(not(isEmpty)) then break endif;
	 };
	 return isEmpty;
}


/**
 * return true if there is a widget in this location
 */
query FORM::Form::haveWidgetHere(in currentRow :Integer, currentLine : Integer ) : Boolean{
	return self.widgets->select(isIn(currentRow,currentLine))->size()>0;
	
}

query FORM::Widget::isIn(in currentRow :Integer, currentLine : Integer) : Boolean{
	return (self.getLine()=currentRow).and(self.getCol()=currentLine);
}


helper FORM::Validator::createValid() : DivType {

	return if self.belowField then null  else object DivType{
		id := self.name;
		text := " " ;
	} endif;
}
helper FORM::Validator::createValidBelow() : DivType {
		
	return if self.belowField then object DivType{
		id := self.name;
		text := " " ;
	} else null endif;
}

/*
 * if widgetlayout exists and widget is on the current row/col
 * create 1 td for each widget on the line (TODO span)
 */
mapping FORM::Widget::widgets2tds(in formId :String) : TdType
when{(self.widgetLayoutInfo.line = rowNumber).and(self.widgetLayoutInfo.column=colNumber)}
{
	//add the class + if present class from htmlAttributes
	_class := "widget_"+formId+"_"+self.name 
		+ if(self.htmlAttributes->select(isKey("widget_class"))->notEmpty()) then " "+self.htmlAttributes->select(isKey("widget_class"))->asOrderedSet()->first().value  else "" endif
	    + if(self.oclIsKindOf(FormButton)) then " "+formId+"_td_"+self.name else "" endif;

	if(self.oclAsType(FORM::Validable).useDefaultValidator and not self.oclAsType(FORM::Validable).below) 
	then 
		div +=object DivType{
			id := self.name + "_default_validator";
			text := " ";
		} 
	endif;
	div += self.oclAsType(FORM::Validable).validators.createValid();

	div += object DivType{
		
		id := self.name;
		rowspan := self.widgetLayoutInfo.verticalSpan;
		colspan := self.widgetLayoutInfo.horizontalSpan;
		text := " ";
	};
	if(self.oclAsType(FORM::Validable).useDefaultValidator and self.oclAsType(FORM::Validable).below) 
	then 
		div +=object DivType{
			id := self.name + "_default_validator";
			text := " ";
		} 
	endif;
	div += self.oclAsType(FORM::Validable).validators.createValidBelow();
	text := " ";
	
};


query Ecore::EStringToStringMapEntry::isKey(in key :String) : Boolean {
	return self.key = key;
}

mapping FORM::Widget::button2Div() : DivType
	when{ self.oclIsKindOf(FormButton)}
{
	//log("widget "+self.name,self);
	id := self.name;
	text := " ";
}

/**
 *	return the attribute line on the widget
 */
query FORM::Widget::getLine() : Integer{
	var wlineNumber : Integer := 0;
	wlineNumber := if self.widgetLayoutInfo.oclIsUndefined() then -1 else self.widgetLayoutInfo.line endif;
	return wlineNumber;
}

/**
 *	return the attribute col on the widget
 */
query FORM::Widget::getCol() : Integer{
	var wcolNumber : Integer := 0;
	wcolNumber := if self.widgetLayoutInfo.oclIsUndefined() then -1 else self.widgetLayoutInfo.column endif;
	return wcolNumber;
}


	
query FORM::Form::getLine(in lineNumber:Integer) : FORM::Line {
	return self.lines->select(isLineNumber(lineNumber))->first();
}

query FORM::Line::isLineNumber(in n : Integer) :Boolean {
	return self.number=n;	
}
	
query FORM::Form::getColumn(in columnNumber:Integer) : FORM::Column {
	return self.columns->select(isColumnNumber(columnNumber))->first();
}

query FORM::Column::isColumnNumber(in n : Integer) :Boolean {
	return self.number=n;
}

}