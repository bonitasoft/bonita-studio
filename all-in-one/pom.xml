<?xml version="1.0" encoding="UTF-8"?>
<project
	xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd"
	xmlns="http://maven.apache.org/POM/4.0.0"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
	<modelVersion>4.0.0</modelVersion>
	<parent>
		<groupId>org.bonitasoft.studio</groupId>
		<artifactId>studio</artifactId>
		<version>10.1.0.W12</version>
	</parent>

	<groupId>org.bonitasoft.studio</groupId>
	<artifactId>all-in-one</artifactId>
	<packaging>eclipse-repository</packaging>

	<properties>
		<product.short.name>BonitaStudioCommunity</product.short.name>
		<productId>org.bonitasoft.studio.product</productId>
		<macosx.appName>${product.short.name}-${branding.version}.app</macosx.appName>
        <root.dir>${project.build.directory}/${product.short.name}-${branding.version}</root.dir>
	</properties>

	<build>
		<pluginManagement>
			<plugins>
				<plugin>
					<groupId>org.eclipse.tycho</groupId>
					<artifactId>target-platform-configuration</artifactId>
					<version>${tychoVersion}</version>
					<executions>
						<execution>
							<id>default-target-platform</id>
							<phase>none</phase>
						</execution>
					</executions>
				</plugin>
				<plugin>
					<groupId>org.eclipse.tycho</groupId>
					<artifactId>tycho-p2-publisher-plugin</artifactId>
					<version>${tychoVersion}</version>
					<executions>
						<execution>
							<id>default-publish-products</id>
							<phase>none</phase>
						</execution>
						<execution>
							<id>default-publish-categories</id>
							<phase>none</phase>
						</execution>
						<execution>
							<id>default-attach-artifacts</id>
							<phase>none</phase>
						</execution>
						<execution>
							<id>default-publish-osgi-ee</id>
							<phase>none</phase>
						</execution>
					</executions>
				</plugin>
				<plugin>
					<groupId>org.eclipse.tycho</groupId>
					<artifactId>tycho-p2-repository-plugin</artifactId>
					<version>${tychoVersion}</version>
					<executions>
						<execution>
							<id>default-publish-products</id>
							<phase>none</phase>
						</execution>
						<execution>
							<id>default-assemble-repository</id>
							<phase>none</phase>
						</execution>
						<execution>
							<id>default-archive-repository</id>
							<phase>none</phase>
						</execution>
					</executions>
				</plugin>
			</plugins>
		</pluginManagement>

		<plugins>
			<plugin>
				<artifactId>maven-clean-plugin</artifactId>
				<configuration>
					<filesets>
						<fileset>
							<directory>${basedir}/installer/images</directory>
							<includes>
								<include>splash.png</include>
							</includes>
						</fileset>
					</filesets>
				</configuration>
			</plugin>
			<plugin>
				<groupId>org.bonitasoft.maven</groupId>
				<artifactId>image-overlay-plugin</artifactId>
				<executions>
					<execution>
						<id>splashVersion</id>
						<configuration>
							<baseImgPath>${basedir}/installer/images/splash_without_version.png</baseImgPath>
							<outputImagePath>${basedir}/installer/images/splash.png</outputImagePath>
							<outputImageFormat>png</outputImageFormat>
							<xLocation>213</xLocation>
							<yLocation>108</yLocation>
							<fontSize>32</fontSize>
							<color>#0B4361</color>
							<versionLabel>${branding.version.short}</versionLabel>
						</configuration>
						<goals>
							<goal>create-image</goal>
						</goals>
					</execution>
				</executions>
			</plugin>
			<plugin>
				<groupId>org.eclipse.tycho</groupId>
				<artifactId>target-platform-configuration</artifactId>
				<executions>
					<execution>
						<id>target-platform</id>
                        <phase>initialize</phase>
						<goals>
							<goal>target-platform</goal>
						</goals>
					</execution>
				</executions>
			</plugin>
			<plugin>
				<groupId>org.eclipse.tycho</groupId>
				<artifactId>tycho-p2-publisher-plugin</artifactId>
				<executions>
					<execution>
						<id>publish</id>
						<goals>
							<goal>publish-products</goal>
						</goals>
						<phase>process-resources</phase>
					</execution>
				</executions>
			</plugin>
			<plugin>
				<groupId>org.eclipse.tycho</groupId>
				<artifactId>tycho-p2-director-plugin</artifactId>
				<version>${tychoVersion}</version>
				<configuration>
					<formats>
						<macosx>tar.gz</macosx>
						<linux>tar.gz</linux>
						<win>zip</win>
					</formats>
					<products>
						<product>
							<id>${productId}</id>
							<archiveFileName>${product.short.name}-${branding.version}</archiveFileName>
							<rootFolders>
								<macosx>${macosx.appName}</macosx>
							</rootFolders>
						</product>
					</products>
				</configuration>
				<executions>
					<execution>
						<id>materialize-products</id>
						<goals>
							<goal>materialize-products</goal>
						</goals>
						<phase>process-resources</phase>
					</execution>
					<execution>
						<id>archive-products</id>
						<phase>package</phase>
						<goals>
							<goal>archive-products</goal>
						</goals>
					</execution>
				</executions>
			</plugin>

        	<!-- Create a proper bundles.info for all-in-one --> 
            <plugin>
                <groupId>org.codehaus.gmaven</groupId>
                <artifactId>groovy-maven-plugin</artifactId>
                <executions>
                    <execution>
                        <phase>initialize</phase>
                        <goals>
                            <goal>execute</goal>
                        </goals>
                        <configuration>
                            <source>
                                project.properties["branding.version.short"] = "${branding.version}".replaceAll('-.*', '')
                           		def versionPattern = ~"([1-9]\\d*)\\.(\\d+)\\.(\\d+)(?:-([a-zA-Z0-9]+))?"
                                def matcher = "${project.version}" =~ versionPattern
                                def result = matcher[0..-1][0]
                                project.properties["product.major.version"] = "${result[1]}.${result[2]}".toString()
                            </source>
                        </configuration>
                    </execution>
                    <execution>
                        <id>verify-packaging</id>
                        <phase>prepare-package</phase>
                        <goals>
                            <goal>execute</goal>
                        </goals>
                        <configuration>
                        	<defaults>
                               <products.dir>${project.build.directory}/products/${productId}</products.dir>
                            </defaults>
                            <source>${project.basedir}/verify-packaging.groovy</source>
                        </configuration>
                    </execution>
                </executions>
            </plugin>
		</plugins>
	</build>

	<profiles>
		<profile>
			<id>generate-installers-descriptors</id>
			<build>
				<plugins>
					<plugin>
						<groupId>org.apache.maven.plugins</groupId>
						<artifactId>maven-antrun-plugin</artifactId>
						<executions>
							<execution>
								<id>installer-file</id>
								<phase>generate-resources</phase>
								<configuration>
									<target>
										<property name="bitrock.install"
											value="${project.build.directory}/installers" />
										<property name="os_arch" value="64" />
										<property file="installer/installer.properties" />
										<property name="updated.project.file"
											value="${project.basedir}/installer/installer.xml" />
										<ant antfile="${project.basedir}/createInstallerProject.xml" />
									</target>
								</configuration>
								<goals>
									<goal>run</goal>
								</goals>
							</execution>
						</executions>
					</plugin>
				</plugins>
			</build>
		</profile>
		<profile>
			<id>exec-installbuilder</id>
			<activation>
				<property>
					<name>BITROCK_HOME</name>
				</property>
			</activation>
			<build>
				<plugins>
					<!-- Build installers for each platform -->
					<plugin>
						<groupId>org.codehaus.mojo</groupId>
						<artifactId>exec-maven-plugin</artifactId>
						<executions>
							<execution>
								<id>linux-x86_64</id>
								<phase>package</phase>
								<configuration>
									<commandlineArgs>build ${project.basedir}/installer/installer.xml --setvars project.outputDirectory=${project.build.directory}/installers/output/ bonita_studio_distribution_folder=${project.build.directory}/products/${productId}/linux/gtk/x86_64 project.installerFilename=${product.short.name}-${branding.version}-x86_64.run project.createUninstaller=1 bonita_studio_content_folder=${bonita_studio_distribution_folder} architecture=linux-x64</commandlineArgs>
								</configuration>
								<goals>
									<goal>exec</goal>
								</goals>
							</execution>
							<execution>
								<id>macosx-x86_64</id>
								<phase>package</phase>
								<configuration>
									<commandlineArgs>build ${project.basedir}/installer/installer.xml --setvars project.outputDirectory=${project.build.directory}/installers/output/ bonita_studio_distribution_folder=${project.build.directory}/products/${productId}/macosx/cocoa/x86_64 project.installerFilename=${product.short.name}-${branding.version}.app project.createUninstaller=0 bonita_studio_content_folder=${bonita_studio_distribution_folder}/${product.short.name}-${branding.version}.app/Contents/Eclipse architecture=osx</commandlineArgs>
								</configuration>
								<goals>
									<goal>exec</goal>
								</goals>
							</execution>
							<execution>
								<id>win-x86_64</id>
								<phase>package</phase>
								<configuration>
									<commandlineArgs>build ${project.basedir}/installer/installer.xml --setvars project.outputDirectory=${project.build.directory}/installers/output/ bonita_studio_distribution_folder=${project.build.directory}/products/${productId}/win32/win32/x86_64 project.installerFilename=${product.short.name}-${branding.version}-x86_64.exe project.createUninstaller=1 bonita_studio_content_folder=${bonita_studio_distribution_folder} architecture=windows</commandlineArgs>
								</configuration>
								<goals>
									<goal>exec</goal>
								</goals>
							</execution>
						</executions>
						<configuration>
							<executable>${BITROCK_HOME}/bin/builder</executable>
						</configuration>
					</plugin>
				</plugins>
			</build>
		</profile>
		<profile>
			<id>windows-codesign</id>
			 <properties>
                <codesign.argLine>sign -username="${env.ESIGNER_CREDS_USR}" -password="${env.ESIGNER_CREDS_PSW}" -credential_id="${env.ESIGNER_CREDENTIAL_ID}" -totp_secret="${env.ESIGNER_TOTP}" -override</codesign.argLine>
            </properties>
			<build>
				<plugins>
					<plugin>
						<groupId>org.codehaus.mojo</groupId>
						<artifactId>exec-maven-plugin</artifactId>
						<executions>
							<execution>
								<id>sign-x86_64-exe</id>
								<phase>process-resources</phase>
								<goals>
									<goal>exec</goal>
								</goals>
								<configuration>
									<executable>CodeSignTool</executable>
									<commandlineArgs>${codesign.argLine} -input_file_path=${project.build.directory}/products/${productId}/win32/win32/x86_64/${product.short.name}.exe</commandlineArgs>
								</configuration>
							</execution>
							<execution>
								<id>sign-installer-x86_64-exe</id>
								<phase>verify</phase>
								<goals>
									<goal>exec</goal>
								</goals>
								<configuration>
                                    <executable>CodeSignTool</executable>
                                    <commandlineArgs>${codesign.argLine} -input_file_path=${project.build.directory}/installers/output/${product.short.name}-${branding.version}-x86_64.exe</commandlineArgs>
								</configuration>
							</execution>
						</executions>
					</plugin>
				</plugins>
			</build>
		</profile>
	</profiles>
</project>
