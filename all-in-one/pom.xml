<?xml version="1.0" encoding="UTF-8"?>
<project
	xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd"
	xmlns="http://maven.apache.org/POM/4.0.0"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
	<modelVersion>4.0.0</modelVersion>
	<parent>
		<groupId>org.bonitasoft.studio</groupId>
		<artifactId>studio</artifactId>
		<version>9.0.0.W25</version>
	</parent>

	<groupId>org.bonitasoft.studio</groupId>
	<artifactId>all-in-one</artifactId>
	<packaging>eclipse-repository</packaging>

	<dependencies>
		<dependency>
			<groupId>ant-contrib</groupId>
			<artifactId>ant-contrib</artifactId>
			<version>1.0b3</version>
		</dependency>
	</dependencies>

	<properties>
		<product.short.name>BonitaStudioCommunity</product.short.name>
		<productId>org.bonitasoft.studio.product</productId>
		<macosx.appName>${product.short.name}-${branding.version}.app</macosx.appName>
		<signServiceURL></signServiceURL>
	</properties>

	<build>
		<pluginManagement>
			<plugins>
				<plugin>
					<groupId>org.eclipse.tycho</groupId>
					<artifactId>target-platform-configuration</artifactId>
					<version>${tychoVersion}</version>
					<executions>
						<execution>
							<id>default-target-platform</id>
							<phase>none</phase>
						</execution>
					</executions>
				</plugin>
				<plugin>
					<groupId>org.eclipse.tycho</groupId>
					<artifactId>tycho-p2-publisher-plugin</artifactId>
					<version>${tychoVersion}</version>
					<executions>
						<execution>
							<id>default-publish-products</id>
							<phase>none</phase>
						</execution>
						<execution>
							<id>default-publish-categories</id>
							<phase>none</phase>
						</execution>
						<execution>
							<id>default-attach-artifacts</id>
							<phase>none</phase>
						</execution>
						<execution>
							<id>default-publish-osgi-ee</id>
							<phase>none</phase>
						</execution>
					</executions>
				</plugin>
				<plugin>
					<groupId>org.eclipse.tycho</groupId>
					<artifactId>tycho-p2-repository-plugin</artifactId>
					<version>${tychoVersion}</version>
					<executions>
						<execution>
							<id>default-publish-products</id>
							<phase>none</phase>
						</execution>
						<execution>
							<id>default-assemble-repository</id>
							<phase>none</phase>
						</execution>
						<execution>
							<id>default-archive-repository</id>
							<phase>none</phase>
						</execution>
					</executions>
				</plugin>
			</plugins>
		</pluginManagement>

		<plugins>
			<plugin>
				<artifactId>maven-clean-plugin</artifactId>
				<configuration>
					<filesets>
						<fileset>
							<directory>${basedir}/installer/images</directory>
							<includes>
								<include>splash.png</include>
							</includes>
						</fileset>
					</filesets>
				</configuration>
			</plugin>
			<plugin>
				<groupId>org.bonitasoft.maven</groupId>
				<artifactId>image-overlay-plugin</artifactId>
				<executions>
					<execution>
						<id>splashVersion</id>
						<configuration>
							<baseImgPath>${basedir}/installer/images/splash_without_version.png</baseImgPath>
							<outputImagePath>${basedir}/installer/images/splash.png</outputImagePath>
							<outputImageFormat>png</outputImageFormat>
							<xLocation>213</xLocation>
							<yLocation>108</yLocation>
							<fontSize>32</fontSize>
							<color>#0B4361</color>
							<versionLabel>${branding.version.short}</versionLabel>
						</configuration>
						<goals>
							<goal>create-image</goal>
						</goals>
					</execution>
				</executions>
			</plugin>
			<plugin>
				<groupId>org.eclipse.tycho</groupId>
				<artifactId>target-platform-configuration</artifactId>
				<executions>
					<execution>
						<id>target-platform</id>
                        <phase>initialize</phase>
						<goals>
							<goal>target-platform</goal>
						</goals>
					</execution>
				</executions>
			</plugin>
			<plugin>
				<groupId>org.eclipse.tycho</groupId>
				<artifactId>tycho-p2-publisher-plugin</artifactId>
				<executions>
					<execution>
						<id>publish</id>
						<goals>
							<goal>publish-products</goal>
						</goals>
						<phase>process-resources</phase>
					</execution>
				</executions>
			</plugin>
			<plugin>
				<groupId>org.eclipse.tycho</groupId>
				<artifactId>tycho-p2-director-plugin</artifactId>
				<version>${tychoVersion}</version>
				<configuration>
					<formats>
						<macosx>tar.gz</macosx>
						<linux>tar.gz</linux>
						<win>zip</win>
					</formats>
					<products>
						<product>
							<id>${productId}</id>
							<rootFolders>
								<macosx>${macosx.appName}</macosx>
							</rootFolders>
						</product>
					</products>
				</configuration>
				<executions>
					<execution>
						<id>materialize-products</id>
						<goals>
							<goal>materialize-products</goal>
						</goals>
						<phase>process-resources</phase>
					</execution>
				</executions>
			</plugin>

        	<!-- Create a proper bundles.info for all-in-one --> 
            <plugin>
                <groupId>org.codehaus.gmaven</groupId>
                <artifactId>groovy-maven-plugin</artifactId>
                <executions>
                    <execution>
                        <phase>initialize</phase>
                        <goals>
                            <goal>execute</goal>
                        </goals>
                        <configuration>
                            <source>
                                project.properties["branding.version.short"] = "${branding.version}".replaceAll('-.*', '')
                           		def versionPattern = ~"([1-9]\\d*)\\.(\\d+)\\.(\\d+)(?:-([a-zA-Z0-9]+))?"
                                def matcher = "${project.version}" =~ versionPattern
                                def result = matcher[0..-1][0]
                                project.properties["product.major.version"] = "${result[1]}.${result[2]}".toString()
                            </source>
                        </configuration>
                    </execution>
                    <execution>
                        <id>include-p2-bundles-for-all-in-one</id>
                        <phase>package</phase>
                        <goals>
                            <goal>execute</goal>
                        </goals>
                        <configuration>
                        	<defaults>
                               <root.dir>${project.build.directory}/${product.short.name}-${branding.version}</root.dir>
                            </defaults>
                            <source>${project.basedir}/all-in-one-p2-packaging.groovy</source>
                        </configuration>
                    </execution>
                    <execution>
                        <id>verify-packaging</id>
                        <phase>prepare-package</phase>
                        <goals>
                            <goal>execute</goal>
                        </goals>
                        <configuration>
                        	<defaults>
                               <products.dir>${project.build.directory}/products/${productId}</products.dir>
                            </defaults>
                            <source>${project.basedir}/verify-packaging.groovy</source>
                        </configuration>
                    </execution>
                </executions>
            </plugin>
            

			<!-- all-in-one assembly with all platforms -->
			<plugin>
				<groupId>org.apache.maven.plugins</groupId>
				<artifactId>maven-assembly-plugin</artifactId>
				<executions>
					<execution>
						<id>make-directory-assembly</id>
						<phase>prepare-package</phase>
						<configuration>
							<descriptors>
								<descriptor>${basedir}/assembly-descriptor.xml</descriptor>
							</descriptors>
							<attach>false</attach>
							<appendAssemblyId>false</appendAssemblyId>
							<finalName>${product.short.name}-${branding.version}</finalName>
						</configuration>
						<goals>
							<goal>single</goal>
						</goals>
					</execution>
					<execution>
						<id>make-zip-assembly</id>
						<phase>package</phase>
						<configuration>
						    <archiveBaseDirectory>${project.build.directory}/${product.short.name}-${branding.version}</archiveBaseDirectory>
							<appendAssemblyId>false</appendAssemblyId>
							<descriptors>
								<descriptor>${basedir}/assembly-zip-descriptor.xml</descriptor>
							</descriptors>
							<finalName>${product.short.name}-${branding.version}</finalName>
						</configuration>
						<goals>
							<goal>single</goal>
						</goals>
					</execution>
				</executions>
			</plugin>
		</plugins>
	</build>

	<profiles>
		<profile>
			<id>buildInstaller</id>
			<activation>
				<property>
					<name>BITROCK_HOME</name>
				</property>
			</activation>
			<properties>
				<if.task>net.sf.antcontrib.logic.IfTask</if.task>
				<jre.url>https://github.com/adoptium/temurin11-binaries/releases/download/jdk-11.0.14%2B9/</jre.url>
            	<jre.winx86.x64.url>OpenJDK11U-jdk_x64_windows_hotspot_11.0.14_9</jre.winx86.x64.url>
				<jre.linuxx86.x64.url>OpenJDK11U-jdk_x64_linux_hotspot_11.0.14_9</jre.linuxx86.x64.url>
				<jre.osx.url>OpenJDK11U-jdk_x64_mac_hotspot_11.0.14_9</jre.osx.url>
				<jre.folder.name>jdk-11.0.14+9</jre.folder.name>
			</properties>
			<build>
				<plugins>
					<!-- Build installers for each platform -->
					<plugin>
						<groupId>org.codehaus.mojo</groupId>
						<artifactId>exec-maven-plugin</artifactId>
						<executions>
							<execution>
								<id>linux-x86_64</id>
								<phase>package</phase>
								<configuration>
									<arguments>
										<argument>build</argument>
										<argument>${basedir}/installer/installer_project_linux_x86_64.xml</argument>
										<argument>linux-x64</argument>
									</arguments>
								</configuration>
								<goals>
									<goal>exec</goal>
								</goals>
							</execution>
							<execution>
								<id>macosx-x86_64</id>
								<phase>package</phase>
								<configuration>
									<arguments>
										<argument>build</argument>
										<argument>${basedir}/installer/installer_project_macosx_x86_64.xml</argument>
										<argument>osx</argument>
									</arguments>
								</configuration>
								<goals>
									<goal>exec</goal>
								</goals>
							</execution>
							<execution>
								<id>win-x86_64</id>
								<phase>package</phase>
								<configuration>
									<arguments>
										<argument>build</argument>
										<argument>${basedir}/installer/installer_project_win_x86_64.xml</argument>
										<argument>windows</argument>
									</arguments>
								</configuration>
								<goals>
									<goal>exec</goal>
								</goals>
							</execution>
						</executions>
						<configuration>
							<executable>${BITROCK_HOME}/bin/builder</executable>
						</configuration>
					</plugin>
					<plugin>
						<groupId>org.apache.maven.plugins</groupId>
						<artifactId>maven-antrun-plugin</artifactId>
						<executions>
							<execution>
								<id>linux x86_64 installer file</id>
								<phase>generate-resources</phase>
								<configuration>
									<target>
										<property name="studio.dir"
											value="${project.build.directory}/products/${productId}/linux/gtk/x86_64" />
										<property name="bitrock.install"
											value="${project.build.directory}/installers" />
										<property name="os_arch" value="64" />
										<property name="enable.uninstaller" value="1" />
										<property file="installer/installer.properties" />
										<property name="installer.name"
											value="${product.short.name}-${branding.version}-x86_64.run" />
										<property name="updated.project.file"
											value="${basedir}/installer/installer_project_linux_x86_64.xml" />
										<property name="jre.folder.name" value="${jre.folder.name}" />
										<ant antfile="createInstallerProject.xml" />
									</target>
								</configuration>
								<goals>
									<goal>run</goal>
								</goals>
							</execution>
							<execution>
								<id>macosx x86_64 installer file</id>
								<phase>generate-resources</phase>
								<configuration>
									<target>
										<property name="mac.studio.dir"
											value="${project.build.directory}/products/${productId}/macosx/cocoa/x86_64" />
										<property name="studio.dir"
											value="${project.build.directory}/products/${productId}/macosx/cocoa/x86_64/${product.short.name}-${branding.version}.app/Contents/Eclipse" />
										<property name="enable.uninstaller" value="0" />
										<property name="bitrock.install"
											value="${project.build.directory}/installers" />
										<property name="os_arch" value="64" />
										<property file="installer/installer.properties" />
										<property name="installer.name"
											value="${product.short.name}-${branding.version}.app" />
										<property name="jre.osx.archive.name" value="${jre.osx.url}.tar.gz" />
										<property name="updated.project.file"
											value="${basedir}/installer/installer_project_macosx_x86_64.xml" />
										<ant antfile="createInstallerProject.xml" />
									</target>
								</configuration>
								<goals>
									<goal>run</goal>
								</goals>
							</execution>
							<execution>
								<id>windows x86_64 installer file</id>
								<phase>generate-resources</phase>
								<configuration>
									<target>
										<property name="studio.dir"
											value="${project.build.directory}/products/${productId}/win32/win32/x86_64" />
										<property name="bitrock.install"
											value="${project.build.directory}/installers" />
										<property name="os_arch" value="64" />
										<property name="enable.uninstaller" value="1" />
										<property file="installer/installer.properties" />
										<property name="installer.name"
											value="${product.short.name}-${branding.version}-x86_64.exe" />
										<property name="updated.project.file"
											value="${basedir}/installer/installer_project_win_x86_64.xml" />
										<ant antfile="createInstallerProject.xml" />
									</target>
								</configuration>
								<goals>
									<goal>run</goal>
								</goals>
							</execution>
							<execution>
								<id>jre-win-x86-x64</id>
								<phase>prepare-package</phase>
								<goals>
									<goal>run</goal>
								</goals>
								<configuration>
									<target>
										<taskdef name="if" classname="${if.task}"
											classpathref="maven.runtime.classpath" />
										<available property="jre.present"
											file="${user.home}/${jre.winx86.x64.url}" />
										<if>
											<not>
												<isset property="jre.present" />
											</not>
											<then>
												<get src="${jre.url}/${jre.winx86.x64.url}.zip"
													dest="${user.home}" verbose="true" />
												<unzip
													src="${user.home}/${jre.winx86.x64.url}.zip"
													dest="${user.home}/${jre.winx86.x64.url}" />
												<delete file="${user.home}/${jre.winx86.x64.url}.tar" />
												<delete
													file="${user.home}/${jre.winx86.x64.url}.tar.gz" />
											</then>
										</if>
										<copy
											todir="${project.build.directory}/products/${productId}/win32/win32/x86_64/jre">
											<fileset
												dir="${user.home}/${jre.winx86.x64.url}/${jre.folder.name}" />
										</copy>
									</target>
								</configuration>
							</execution>
							<execution>
								<id>jre-linux-x86-64</id>
								<phase>prepare-package</phase>
								<goals>
									<goal>run</goal>
								</goals>
								<configuration>
									<target>
										<taskdef name="if" classname="${if.task}"
											classpathref="maven.runtime.classpath" />
										<available property="jre.present"
											file="${user.home}/${jre.linuxx86.x64.url}" />
										<if>
											<not>
												<isset property="jre.present" />
											</not>
											<then>
												<get src="${jre.url}/${jre.linuxx86.x64.url}.tar.gz"
													dest="${user.home}" />
												<gunzip
													src="${user.home}/${jre.linuxx86.x64.url}.tar.gz" />
												<untar src="${user.home}/${jre.linuxx86.x64.url}.tar"
													dest="${user.home}/${jre.linuxx86.x64.url}" />
												<delete
													file="${user.home}/${jre.linuxx86.x64.url}.tar" />
												<delete
													file="${user.home}/${jre.linuxx86.x64.url}.tar.gz" />
											</then>
										</if>
										<copy
											todir="${project.build.directory}/products/${productId}/linux/gtk/x86_64/jre">
											<fileset
												dir="${user.home}/${jre.linuxx86.x64.url}/${jre.folder.name}" />
										</copy>
									</target>
								</configuration>
							</execution>
							<execution>
								<id>jre-osx-x86-x64</id>
								<phase>prepare-package</phase>
								<goals>
									<goal>run</goal>
								</goals>
								<configuration>
									<target>
										<taskdef name="if" classname="${if.task}"
											classpathref="maven.runtime.classpath" />
										<available property="jre.present"
											file="${user.home}/${jre.osx.url}" />
										<if>
											<not>
												<isset property="jre.present" />
											</not>
											<then>
												<get src="${jre.url}/${jre.osx.url}.tar.gz"
													dest="${user.home}" />
												<gunzip
													src="${user.home}/${jre.osx.url}.tar.gz" />
												<untar src="${user.home}/${jre.osx.url}.tar"
													dest="${user.home}/${jre.osx.url}" />
												<delete
													file="${user.home}/${jre.osx.url}.tar" />
												<delete
													file="${user.home}${jre.osx.url}.tar.gz" />
											</then>
										</if>
										<copy
											todir="${project.build.directory}/products/${productId}/macosx/cocoa/x86_64/${product.short.name}-${branding.version}.app/Contents/Eclipse/jre">
											<fileset
												dir="${user.home}/${jre.osx.url}/${jre.folder.name}" />
										</copy>
									</target>
								</configuration>
							</execution>
						</executions>
					</plugin>
				</plugins>
			</build>
		</profile>
		<profile>
			<id>sign</id>
			<build>
				<plugins>
					<plugin>
						<groupId>org.codehaus.mojo</groupId>
						<artifactId>exec-maven-plugin</artifactId>
						<executions>
							<execution>
								<id>sign-x86_64-exe</id>
								<phase>process-resources</phase>
								<goals>
									<goal>exec</goal>
								</goals>
								<configuration>
									<executable>./sign.sh</executable>
									<arguments>
										<argument>${product.short.name}.exe</argument>
										<argument>${signServiceURL}</argument>
										<argument>${product.short.name}.exe</argument>
										<argument>${project.build.directory}/products/${productId}/win32/win32/x86_64/</argument>
									</arguments>
								</configuration>
							</execution>
							<execution>
								<id>sign-osx-app</id>
								<phase>process-resources</phase>
								<goals>
									<goal>exec</goal>
								</goals>
								<configuration>
									<executable>./sign-macosx.sh</executable>
									<arguments>
										<argument>${product.short.name}-${branding.version}.app</argument>
										<argument>${macSignServiceURL}</argument>
										<argument>${project.build.directory}/products/${productId}/macosx/cocoa/x86_64/</argument>
									</arguments>
								</configuration>
							</execution>
							<execution>
								<id>sign-installer-x86_64-exe</id>
								<phase>verify</phase>
								<goals>
									<goal>exec</goal>
								</goals>
								<configuration>
									<executable>./sign.sh</executable>
									<arguments>
										<argument>${product.short.name}-${branding.version}-x86_64.exe</argument>
										<argument>${signServiceURL}</argument>
										<argument>${product.short.name}-${branding.version}-x86_64.exe</argument>
										<argument>${project.build.directory}/installers/output/</argument>
									</arguments>
								</configuration>
							</execution>
							<execution>
								<id>build-and-sign-osx-dmg</id>
								<phase>verify</phase>
								<goals>
									<goal>exec</goal>
								</goals>
								<configuration>
									<executable>./sign.sh</executable>
									<arguments>
										<argument>${product.short.name}-${branding.version}.app.zip</argument>
										<argument>${macBuildAndSignInstallerServiceURL}</argument>
										<argument>${product.short.name}-${branding.version}-macOs.dmg</argument>
										<argument>${project.build.directory}/installers/output/</argument>
									</arguments>
								</configuration>
							</execution>
						</executions>
					</plugin>
				</plugins>
			</build>
		</profile>
	</profiles>
</project>
